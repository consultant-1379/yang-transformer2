package com.ericsson.oss.mediation.modeling.yangtools.transformer2.test.generate.basics;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;

import java.io.File;
import java.util.Arrays;

import org.junit.Test;

import com.ericsson.oss.itpf.datalayer.dps.modeling.schema.gen.dps_common.WriteBehaviorType;
import com.ericsson.oss.itpf.datalayer.dps.modeling.schema.gen.dps_primarytype.PrimaryTypeDefinition;
import com.ericsson.oss.itpf.datalayer.dps.modeling.schema.gen.dps_primarytype_ext.PrimaryTypeExtensionDefinition;
import com.ericsson.oss.itpf.datalayer.dps.modeling.schema.gen.dps_relationship.PrimaryTypeContainment;
import com.ericsson.oss.itpf.datalayer.dps.modeling.schema.gen.dps_relationship.PrimaryTypeRelationshipDefinition;
import com.ericsson.oss.itpf.modeling.common.info.ModelInfo;
import com.ericsson.oss.mediation.modeling.yangtools.transformer2.Constants;
import com.ericsson.oss.mediation.modeling.yangtools.transformer2.TransformerContext;
import com.ericsson.oss.mediation.modeling.yangtools.transformer2.YangTransformer2;
import com.ericsson.oss.mediation.modeling.yangtools.transformer2.generate.PrimaryTypeExtensionGenerator;
import com.ericsson.oss.mediation.modeling.yangtools.transformer2.generate.PrimaryTypeGenerator;
import com.ericsson.oss.mediation.modeling.yangtools.transformer2.generate.PrimaryTypeRelationshipGenerator;
import com.ericsson.oss.mediation.modeling.yangtools.transformer2.testutils.TransformerTestUtil;
import com.ericsson.oss.mediation.modeling.yangtools.transformer2.util.YangNameVersionUtil;
import com.ericsson.oss.mediation.modeling.yangtools.validator.standalone.enm.ValidatorFindingTypeEnm;
import com.ericsson.oss.services.cm.modeling.schema.gen.cfm_miminfo.ManagementInformationModelInformation;

public class SimpleDeviationTest extends TransformerTestUtil{

	private static final String TEST_SUB_DIR = TEST_MODULES_DIR + "generate-basics/";

	private static final String MODULE_NS1 = "urn:test:simple-deviation-one";
	private static final String MODULE_NAME1 = "simple-deviation-one";
	private static final String MODULE_REVISION1 = "2021-10-13";
	private static final String MODULE_XYZ_VERSION1 = "2021.10.13";

	private static final String MODULE_NS2 = "urn:test:simple-deviation-two";
	private static final String MODULE_NAME2 = "simple-deviation-two";
	private static final String MODULE_REVISION2 = "2021-04-21";
	private static final String MODULE_XYZ_VERSION2 = "2021.4.21";

	@Test
	public void test___simple_deviation() {

		additionallyIgnoreFindingDuringValidation(ValidatorFindingTypeEnm.N671_UNSUPPORTED_EXTENSION.toString());

		/*
		 * Two modules, one deviating the other with a few 'not-supported'.
		 */
		final TransformerContext context = createContextWith3ppModules(Arrays.asList(new File(TEST_SUB_DIR + "simple-deviation")));
		YangTransformer2.transform(context);

		assertEModelCreatedCount(3, 1, 0, 0, 6, 0);

		// -----------------------------------------------------

		final ModelInfo cont2modelInfo = PrimaryTypeGenerator.getModelInfoForPrimaryTypeDefinition(MODULE_NS1, "cont2", MODULE_XYZ_VERSION1);
		final PrimaryTypeDefinition cont2 = load(cont2modelInfo);

		assertNotNull(findAttribute(cont2, "leaf21"));

		final ModelInfo cont4modelInfo = PrimaryTypeGenerator.getModelInfoForPrimaryTypeDefinition(MODULE_NS1, "cont4", MODULE_XYZ_VERSION1);
		final PrimaryTypeDefinition cont4 = load(cont4modelInfo);

		assertNotNull(findAttribute(cont4, "leaf48"));
		assertHasAutogeneratedKey(cont4, "cont4", WriteBehaviorType.PERSIST_AND_DELEGATE);

		final ModelInfo cont5modelInfo = PrimaryTypeGenerator.getModelInfoForPrimaryTypeDefinition(MODULE_NS1, "cont5", MODULE_XYZ_VERSION1);
		final PrimaryTypeDefinition cont5 = load(cont5modelInfo);

		assertNotNull(findAttribute(cont5, "leaf58"));		// exists in base, deviated out by extension!
		assertNotNull(findAttribute(cont5, "leaf59"));

		// -----------------------------------------------------

		/*
		 * In the extension we should only have one removed attribute.
		 */

		final ModelInfo cont5ExtensionModelInfo = PrimaryTypeExtensionGenerator.getModelInfoForPrimaryTypeExtensionDefinition(DEFAULT_TEST_TARGET, MODULE_NS1, "cont5");
		final PrimaryTypeExtensionDefinition cont5ext = load(cont5ExtensionModelInfo);

		assertRequiresTargetType(context, null, cont5ext.getRequiresTargetType());

		assertSize(1, cont5ext.getPrimaryTypeAttributeRemoval());
		assertEquals("leaf58", cont5ext.getPrimaryTypeAttributeRemoval().get(0).getAttributeName());

		assertEmpty(cont5ext.getPrimaryTypeAssociationExtension());
		assertEmpty(cont5ext.getPrimaryTypeAttributeExtension());
		assertNull(cont5ext.getPrimaryTypeAttributeReplacement());
		assertNull(cont5ext.getPrimaryTypeRemoval());

		// -----------------------------------------------------

		final ModelInfo modelInfoForPrimaryTypeRelationshipDefinition = PrimaryTypeRelationshipGenerator.getModelInfoForPrimaryTypeRelationshipDefinition(DEFAULT_TEST_TARGET);
		final PrimaryTypeRelationshipDefinition rels = load(modelInfoForPrimaryTypeRelationshipDefinition);

		assertContainmentsCreatedCount(rels, 3);

		final PrimaryTypeContainment managedElementToCont2 = findAndAssertContainment(rels, Constants.MANAGEDELEMENT, "cont2");
		assertContainment(managedElementToCont2, context, null, Constants.COM_TOP_MANAGEDELEMENT_STAR.getNamespace(), Constants.COM_TOP_MANAGEDELEMENT_STAR.getName(), Constants.COM_TOP_MANAGEDELEMENT_STAR.getVersion().toString(), MODULE_NS1, "cont2", MODULE_XYZ_VERSION1, null, 1L);

		final PrimaryTypeContainment cont2Tocont4 = findAndAssertContainment(rels, "cont2", "cont4");
		assertContainment(cont2Tocont4, context, null, MODULE_NS1, "cont2", MODULE_XYZ_VERSION1, MODULE_NS1, "cont4", MODULE_XYZ_VERSION1, null, 1L);

		final PrimaryTypeContainment managedElementToCont5 = findAndAssertContainment(rels, Constants.MANAGEDELEMENT, "cont5");
		assertContainment(managedElementToCont5, context, null, Constants.COM_TOP_MANAGEDELEMENT_STAR.getNamespace(), Constants.COM_TOP_MANAGEDELEMENT_STAR.getName(), Constants.COM_TOP_MANAGEDELEMENT_STAR.getVersion().toString(), MODULE_NS1, "cont5", MODULE_XYZ_VERSION1, null, 1L);

		// -----------------------------------------------------

		final ModelInfo yangModuleOne = YangNameVersionUtil.getNetYangModelInfoForYam(MODULE_NS1, MODULE_NAME1, MODULE_REVISION1);
		assertModelExists(yangModuleOne);

		final ModelInfo yangModuleTwo = YangNameVersionUtil.getNetYangModelInfoForYam(MODULE_NS2, MODULE_NAME2, MODULE_REVISION2);
		assertModelExists(yangModuleTwo);

		// -----------------------------------------------------

		final ManagementInformationModelInformation mimInfo = loadCfmMimInfo(context, null);
		assertSize(6, mimInfo.getSupportedMims().getMimMappedTo());

		assertHasSupportedMim(mimInfo, MODULE_NS1, MODULE_XYZ_VERSION1, yangModuleOne.toUrn());
		assertHasSupportedMim(mimInfo, MODULE_NS2, MODULE_XYZ_VERSION2, yangModuleTwo.toUrn());
	}
}
