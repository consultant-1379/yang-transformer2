package com.ericsson.oss.mediation.modeling.yangtools.transformer2.test.generate.basics;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;

import java.io.File;
import java.util.Collections;
import java.util.Properties;

import org.junit.Test;

import com.ericsson.oss.itpf.datalayer.dps.modeling.schema.gen.dps_common.WriteBehaviorType;
import com.ericsson.oss.itpf.datalayer.dps.modeling.schema.gen.dps_primarytype.PrimaryTypeAttribute;
import com.ericsson.oss.itpf.datalayer.dps.modeling.schema.gen.dps_primarytype.PrimaryTypeDefinition;
import com.ericsson.oss.itpf.datalayer.dps.modeling.schema.gen.dps_primarytype_ext.PrimaryTypeExtensionDefinition;
import com.ericsson.oss.itpf.datalayer.dps.modeling.schema.gen.dps_relationship.PrimaryTypeContainment;
import com.ericsson.oss.itpf.datalayer.dps.modeling.schema.gen.dps_relationship.PrimaryTypeRelationshipDefinition;
import com.ericsson.oss.itpf.modeling.common.info.ModelInfo;
import com.ericsson.oss.itpf.modeling.schema.gen.oss_common.StringType;
import com.ericsson.oss.mediation.modeling.yangtools.transformer2.Constants;
import com.ericsson.oss.mediation.modeling.yangtools.transformer2.TransformerContext;
import com.ericsson.oss.mediation.modeling.yangtools.transformer2.TransformerContext.FeatureHandling;
import com.ericsson.oss.mediation.modeling.yangtools.transformer2.YangTransformer2;
import com.ericsson.oss.mediation.modeling.yangtools.transformer2.generate.PrimaryTypeExtensionGenerator;
import com.ericsson.oss.mediation.modeling.yangtools.transformer2.generate.PrimaryTypeGenerator;
import com.ericsson.oss.mediation.modeling.yangtools.transformer2.generate.PrimaryTypeRelationshipGenerator;
import com.ericsson.oss.mediation.modeling.yangtools.transformer2.nmt.YangTransformer2PluginProperties;
import com.ericsson.oss.mediation.modeling.yangtools.transformer2.testutils.TransformerTestUtil;
import com.ericsson.oss.mediation.modeling.yangtools.transformer2.util.CfmMimInfoSupport;
import com.ericsson.oss.mediation.modeling.yangtools.transformer2.util.YangNameVersionUtil;
import com.ericsson.oss.services.cm.modeling.schema.gen.cfm_miminfo.ManagementInformationModelInformation;

public class SimpleAugmentationTest extends TransformerTestUtil{

	private static final String TEST_SUB_DIR = TEST_MODULES_DIR + "generate-basics/";

	private static final String MODULE_NS1 = "urn:test:simple-augmentation-one";
	private static final String MODULE_NAME1 = "simple-augmentation-one";
	private static final String MODULE_REVISION1 = "2021-10-13";
	private static final String MODULE_XYZ_VERSION1 = "2021.10.13";

	private static final String MODULE_NS2 = "urn:test:simple-augmentation-two";
	private static final String MODULE_NAME2 = "simple-augmentation-two";
	private static final String MODULE_REVISION2 = "2021-05-09";
	private static final String MODULE_XYZ_VERSION2 = "2021.5.9";

	@Test
	public void test___simple_augmentation___no_excludelisting() {

		final TransformerContext context = createContext(new File(TEST_SUB_DIR + "simple-augmentation"));
		YangTransformer2.transform(context);

		assertEModelCreatedCount(5, 1, 0, 0, 2, 0);

		// -----------------------------------------------------

		final ModelInfo cont1modelInfo = PrimaryTypeGenerator.getModelInfoForPrimaryTypeDefinition(MODULE_NS1, "cont1", MODULE_XYZ_VERSION1);
		final PrimaryTypeDefinition cont1 = load(cont1modelInfo);
		assertHasMeta(Constants.META_TOP_LEVEL_DATA_NODE, cont1);

		assertNotNull(findAttribute(cont1, "leaf11"));
		assertHasNotMeta(Constants.META_TOP_LEVEL_DATA_NODE, findAttribute(cont1, "leaf11"));
		assertNotNull(findAttribute(cont1, "leaf12"));
		assertHasNotMeta(Constants.META_TOP_LEVEL_DATA_NODE, findAttribute(cont1, "leaf12"));
		assertHasAutogeneratedKey(cont1, "cont1", WriteBehaviorType.PERSIST_AND_DELEGATE);

		final ModelInfo cont2modelInfo = PrimaryTypeGenerator.getModelInfoForPrimaryTypeDefinition(MODULE_NS1, "cont2", MODULE_XYZ_VERSION1);
		final PrimaryTypeDefinition cont2 = load(cont2modelInfo);

		assertNotNull(findAttribute(cont2, "leaf21"));
		assertNull(findAttribute(cont2, "leaf27"));			// should not exist in the PT, should be in the extension.
		assertHasAutogeneratedKey(cont2, "cont2", WriteBehaviorType.PERSIST_AND_DELEGATE);

		final ModelInfo cont3modelInfo = PrimaryTypeGenerator.getModelInfoForPrimaryTypeDefinition(MODULE_NS1, "cont3", MODULE_XYZ_VERSION1);
		final PrimaryTypeDefinition cont3 = load(cont3modelInfo);

		assertNotNull(findAttribute(cont3, "leaf35"));
		assertHasNotMeta(Constants.META_TOP_LEVEL_DATA_NODE, findAttribute(cont3, "leaf35"));
		assertHasAutogeneratedKey(cont3, "cont3", WriteBehaviorType.PERSIST_AND_DELEGATE);

		final ModelInfo cont4modelInfo = PrimaryTypeGenerator.getModelInfoForPrimaryTypeDefinition(MODULE_NS2, "cont4", MODULE_XYZ_VERSION2);
		final PrimaryTypeDefinition cont4 = load(cont4modelInfo);

		assertNotNull(findAttribute(cont4, "leaf43"));
		assertHasAutogeneratedKey(cont4, "cont4", WriteBehaviorType.PERSIST_AND_DELEGATE);

		final ModelInfo cont5modelInfo = PrimaryTypeGenerator.getModelInfoForPrimaryTypeDefinition(MODULE_NS2, "cont5", MODULE_XYZ_VERSION2);
		final PrimaryTypeDefinition cont5 = load(cont5modelInfo);

		assertNotNull(findAttribute(cont5, "leaf51"));
		assertHasAutogeneratedKey(cont5, "cont5", WriteBehaviorType.PERSIST_AND_DELEGATE);
		assertUsualValuesForPrimaryType(cont5);
		assertWriteBehaviour(WriteBehaviorType.PERSIST_AND_DELEGATE, cont5);

		// -----------------------------------------------------

		/*
		 * In the extension we should only have one additional attribute (the one that got augmented into 'cont2')
		 */

		final ModelInfo cont2ExtModelInfo = PrimaryTypeExtensionGenerator.getModelInfoForPrimaryTypeExtensionDefinition(DEFAULT_TEST_TARGET, MODULE_NS1, "cont2");
		final PrimaryTypeExtensionDefinition cont2ext = load(cont2ExtModelInfo);

		assertRequiresTargetType(context, null, cont2ext.getRequiresTargetType());

		assertSize(1, cont2ext.getExtendedModelElement());
		assertEquals(cont2modelInfo.toImpliedUrn(), cont2ext.getExtendedModelElement().get(0).getUrn());

		assertSize(1, cont2ext.getPrimaryTypeExtension().getPrimaryTypeAttribute());
		final PrimaryTypeAttribute leaf27 = cont2ext.getPrimaryTypeExtension().getPrimaryTypeAttribute().get(0);
		assertInstanceOf(StringType.class, leaf27.getType());

		assertEmpty(cont2ext.getPrimaryTypeExtension().getPrimaryTypeAction());
		assertEmpty(cont2ext.getPrimaryTypeAssociationExtension());
		assertEmpty(cont2ext.getPrimaryTypeAttributeExtension());
		assertEmpty(cont2ext.getPrimaryTypeAttributeRemoval());
		assertNull(cont2ext.getPrimaryTypeAttributeReplacement());
		assertNull(cont2ext.getPrimaryTypeRemoval());

		// -----------------------------------------------------

		final ModelInfo modelInfoForPrimaryTypeRelationshipDefinition = PrimaryTypeRelationshipGenerator.getModelInfoForPrimaryTypeRelationshipDefinition(DEFAULT_TEST_TARGET);
		final PrimaryTypeRelationshipDefinition rels = load(modelInfoForPrimaryTypeRelationshipDefinition);

		assertContainmentsCreatedCount(rels, 5);

		final PrimaryTypeContainment managedElementToCont1 = findAndAssertContainment(rels, Constants.MANAGEDELEMENT, "cont1");
		assertContainment(managedElementToCont1, context, null, Constants.COM_TOP_MANAGEDELEMENT_STAR.getNamespace(), Constants.COM_TOP_MANAGEDELEMENT_STAR.getName(), Constants.COM_TOP_MANAGEDELEMENT_STAR.getVersion().toString(), MODULE_NS1, "cont1", MODULE_XYZ_VERSION1, null, 1L);

		final PrimaryTypeContainment managedElementToCont2 = findAndAssertContainment(rels, Constants.MANAGEDELEMENT, "cont2");
		assertContainment(managedElementToCont2, context, null, Constants.COM_TOP_MANAGEDELEMENT_STAR.getNamespace(), Constants.COM_TOP_MANAGEDELEMENT_STAR.getName(), Constants.COM_TOP_MANAGEDELEMENT_STAR.getVersion().toString(), MODULE_NS1, "cont2", MODULE_XYZ_VERSION1, null, 1L);

		final PrimaryTypeContainment cont2ToCont3 = findAndAssertContainment(rels, "cont2", "cont3");
		assertContainment(cont2ToCont3, context, null, MODULE_NS1, "cont2", MODULE_XYZ_VERSION1, MODULE_NS1, "cont3", MODULE_XYZ_VERSION1, null, 1L);

		final PrimaryTypeContainment managedElementToCont4 = findAndAssertContainment(rels, Constants.MANAGEDELEMENT, "cont4");
		assertContainment(managedElementToCont4, context, null, Constants.COM_TOP_MANAGEDELEMENT_STAR.getNamespace(), Constants.COM_TOP_MANAGEDELEMENT_STAR.getName(), Constants.COM_TOP_MANAGEDELEMENT_STAR.getVersion().toString(), MODULE_NS2, "cont4", MODULE_XYZ_VERSION2, null, 1L);

		final PrimaryTypeContainment cont2ToCont5 = findAndAssertContainment(rels, "cont2", "cont5");
		assertContainment(cont2ToCont5, context, null, MODULE_NS1, "cont2", MODULE_XYZ_VERSION1, MODULE_NS2, "cont5", MODULE_XYZ_VERSION2, null, 1L);

		// -----------------------------------------------------

		final ModelInfo yangModuleOne = YangNameVersionUtil.getNetYangModelInfoForYam(MODULE_NS1, MODULE_NAME1, MODULE_REVISION1);
		assertModelExists(yangModuleOne);

		final ModelInfo yangModuleTwo = YangNameVersionUtil.getNetYangModelInfoForYam(MODULE_NS2, MODULE_NAME2, MODULE_REVISION2);
		assertModelExists(yangModuleTwo);

		// -----------------------------------------------------

		final ManagementInformationModelInformation mimInfo = loadCfmMimInfo(context, null);
		assertSize(2, mimInfo.getSupportedMims().getMimMappedTo());

		assertHasSupportedMim(mimInfo, MODULE_NS1, MODULE_XYZ_VERSION1, yangModuleOne.toUrn());
		assertHasSupportedMim(mimInfo, MODULE_NS2, MODULE_XYZ_VERSION2, yangModuleTwo.toUrn());
	}

	@Test
	public void test___simple_augmentation___excludelist_module_one() {

		final TransformerContext context = createContext(new File(TEST_SUB_DIR + "simple-augmentation"));
		context.setExcludedNamespaces(Collections.singletonList(MODULE_NS1));

		YangTransformer2.transform(context);

		assertEModelCreatedCount(1, 1, 0, 0, 2, 0);

		// -----------------------------------------------------

		final ModelInfo cont4modelInfo = PrimaryTypeGenerator.getModelInfoForPrimaryTypeDefinition(MODULE_NS2, "cont4", MODULE_XYZ_VERSION2);
		final PrimaryTypeDefinition cont4 = load(cont4modelInfo);

		assertNotNull(findAttribute(cont4, "leaf43"));
		assertHasAutogeneratedKey(cont4, "cont4", WriteBehaviorType.PERSIST_AND_DELEGATE);

		// -----------------------------------------------------

		final ModelInfo modelInfoForPrimaryTypeRelationshipDefinition = PrimaryTypeRelationshipGenerator.getModelInfoForPrimaryTypeRelationshipDefinition(DEFAULT_TEST_TARGET);
		final PrimaryTypeRelationshipDefinition rels = load(modelInfoForPrimaryTypeRelationshipDefinition);

		assertContainmentsCreatedCount(rels, 1);

		final PrimaryTypeContainment managedElementToCont4 = findAndAssertContainment(rels, Constants.MANAGEDELEMENT, "cont4");
		assertContainment(managedElementToCont4, context, null, Constants.COM_TOP_MANAGEDELEMENT_STAR.getNamespace(), Constants.COM_TOP_MANAGEDELEMENT_STAR.getName(), Constants.COM_TOP_MANAGEDELEMENT_STAR.getVersion().toString(), MODULE_NS2, "cont4", MODULE_XYZ_VERSION2, null, 1L);

		// -----------------------------------------------------

		final ModelInfo yangModuleOne = YangNameVersionUtil.getNetYangModelInfoForYam(MODULE_NS1, MODULE_NAME1, MODULE_REVISION1);
		assertModelExists(yangModuleOne);

		final ModelInfo yangModuleTwo = YangNameVersionUtil.getNetYangModelInfoForYam(MODULE_NS2, MODULE_NAME2, MODULE_REVISION2);
		assertModelExists(yangModuleTwo);

		// -----------------------------------------------------

		final ManagementInformationModelInformation mimInfo = loadCfmMimInfo(context, null);
		assertSize(1, mimInfo.getSupportedMims().getMimMappedTo());

		assertHasSupportedMim(mimInfo, MODULE_NS2, MODULE_XYZ_VERSION2, yangModuleTwo.toUrn());
	}

	@Test
	public void test___simple_augmentation___excludelist_module_two() {

		final TransformerContext context = createContext(new File(TEST_SUB_DIR + "simple-augmentation"));
		context.setExcludedNamespaces(Collections.singletonList(MODULE_NS2));

		YangTransformer2.transform(context);

		assertEModelCreatedCount(3, 1, 0, 0, 2, 0);

		// -----------------------------------------------------

		final ModelInfo cont1modelInfo = PrimaryTypeGenerator.getModelInfoForPrimaryTypeDefinition(MODULE_NS1, "cont1", MODULE_XYZ_VERSION1);
		final PrimaryTypeDefinition cont1 = load(cont1modelInfo);

		assertNotNull(findAttribute(cont1, "leaf11"));
		assertHasAutogeneratedKey(cont1, "cont1", WriteBehaviorType.PERSIST_AND_DELEGATE);

		final ModelInfo cont2modelInfo = PrimaryTypeGenerator.getModelInfoForPrimaryTypeDefinition(MODULE_NS1, "cont2", MODULE_XYZ_VERSION1);
		final PrimaryTypeDefinition cont2 = load(cont2modelInfo);

		assertNotNull(findAttribute(cont2, "leaf21"));
		assertNull(findAttribute(cont2, "leaf27"));
		assertHasAutogeneratedKey(cont2, "cont2", WriteBehaviorType.PERSIST_AND_DELEGATE);

		final ModelInfo cont3modelInfo = PrimaryTypeGenerator.getModelInfoForPrimaryTypeDefinition(MODULE_NS1, "cont3", MODULE_XYZ_VERSION1);
		final PrimaryTypeDefinition cont3 = load(cont3modelInfo);

		assertNotNull(findAttribute(cont3, "leaf35"));
		assertHasAutogeneratedKey(cont3, "cont3", WriteBehaviorType.PERSIST_AND_DELEGATE);

		// -----------------------------------------------------

		final ModelInfo modelInfoForPrimaryTypeRelationshipDefinition = PrimaryTypeRelationshipGenerator.getModelInfoForPrimaryTypeRelationshipDefinition(DEFAULT_TEST_TARGET);
		final PrimaryTypeRelationshipDefinition rels = load(modelInfoForPrimaryTypeRelationshipDefinition);

		assertContainmentsCreatedCount(rels, 3);

		final PrimaryTypeContainment managedElementToCont1 = findAndAssertContainment(rels, Constants.MANAGEDELEMENT, "cont1");
		assertContainment(managedElementToCont1, context, null, Constants.COM_TOP_MANAGEDELEMENT_STAR.getNamespace(), Constants.COM_TOP_MANAGEDELEMENT_STAR.getName(), Constants.COM_TOP_MANAGEDELEMENT_STAR.getVersion().toString(), MODULE_NS1, "cont1", MODULE_XYZ_VERSION1, null, 1L);

		final PrimaryTypeContainment managedElementToCont2 = findAndAssertContainment(rels, Constants.MANAGEDELEMENT, "cont2");
		assertContainment(managedElementToCont2, context, null, Constants.COM_TOP_MANAGEDELEMENT_STAR.getNamespace(), Constants.COM_TOP_MANAGEDELEMENT_STAR.getName(), Constants.COM_TOP_MANAGEDELEMENT_STAR.getVersion().toString(), MODULE_NS1, "cont2", MODULE_XYZ_VERSION1, null, 1L);

		final PrimaryTypeContainment cont2ToCont3 = findAndAssertContainment(rels, "cont2", "cont3");
		assertContainment(cont2ToCont3, context, null, MODULE_NS1, "cont2", MODULE_XYZ_VERSION1, MODULE_NS1, "cont3", MODULE_XYZ_VERSION1, null, 1L);	

		// -----------------------------------------------------

		final ModelInfo yangModuleOne = YangNameVersionUtil.getNetYangModelInfoForYam(MODULE_NS1, MODULE_NAME1, MODULE_REVISION1);
		assertModelExists(yangModuleOne);

		final ModelInfo yangModuleTwo = YangNameVersionUtil.getNetYangModelInfoForYam(MODULE_NS2, MODULE_NAME2, MODULE_REVISION2);
		assertModelExists(yangModuleTwo);

		// -----------------------------------------------------

		final ManagementInformationModelInformation mimInfo = loadCfmMimInfo(context, null);
		assertSize(1, mimInfo.getSupportedMims().getMimMappedTo());

		assertHasSupportedMim(mimInfo, MODULE_NS1, MODULE_XYZ_VERSION1, yangModuleOne.toUrn());
	}

	@Test
	public void test___simple_augmentation___remove_schema_nodes_with_if_feature() {

		final TransformerContext context = createContext(new File(TEST_SUB_DIR + "simple-augmentation"));
		context.setFeatureHandling(FeatureHandling.REMOVE_ALL);
		YangTransformer2.transform(context);

		internal___simple_augmentation___remove_schema_nodes_with_if_feature(context, null);
	}

	@SuppressWarnings("deprecation")
	@Test
	public void test___simple_augmentation___remove_schema_nodes_with_if_feature_through_nmt_plugin() {

		final Properties overwritingProperties = new Properties();
		overwritingProperties.setProperty(YangTransformer2PluginProperties.REMOVE_SCHEMA_NODES_HAVING_IF_FEATURE, " true ");

		final Properties actualNmtProperties = transformThroughNmtPlugin(new File(TEST_SUB_DIR + "simple-augmentation"), overwritingProperties);

		internal___simple_augmentation___remove_schema_nodes_with_if_feature(null, actualNmtProperties);
	}

	private void internal___simple_augmentation___remove_schema_nodes_with_if_feature(final TransformerContext context, final Properties actualNmtProperties) {

		assertEModelCreatedCount(4, 3, 0, 0, 2, 0);

		// -----------------------------------------------------

		final ModelInfo cont1modelInfo = PrimaryTypeGenerator.getModelInfoForPrimaryTypeDefinition(MODULE_NS1, "cont1", MODULE_XYZ_VERSION1);
		final PrimaryTypeDefinition cont1 = load(cont1modelInfo);

		assertNotNull(findAttribute(cont1, "leaf11"));
		assertNotNull(findAttribute(cont1, "leaf12"));
		assertHasAutogeneratedKey(cont1, "cont1", WriteBehaviorType.PERSIST_AND_DELEGATE);

		final ModelInfo cont2modelInfo = PrimaryTypeGenerator.getModelInfoForPrimaryTypeDefinition(MODULE_NS1, "cont2", MODULE_XYZ_VERSION1);
		final PrimaryTypeDefinition cont2 = load(cont2modelInfo);

		assertNotNull(findAttribute(cont2, "leaf21"));
		assertNull(findAttribute(cont2, "leaf27"));		// should not exist in the PT, should be in the extension.
		assertHasAutogeneratedKey(cont2, "cont2", WriteBehaviorType.PERSIST_AND_DELEGATE);

		final ModelInfo cont3modelInfo = PrimaryTypeGenerator.getModelInfoForPrimaryTypeDefinition(MODULE_NS1, "cont3", MODULE_XYZ_VERSION1);
		final PrimaryTypeDefinition cont3 = load(cont3modelInfo);

		assertNotNull(findAttribute(cont3, "leaf35"));
		assertHasAutogeneratedKey(cont3, "cont3", WriteBehaviorType.PERSIST_AND_DELEGATE);

		final ModelInfo cont4modelInfo = PrimaryTypeGenerator.getModelInfoForPrimaryTypeDefinition(MODULE_NS2, "cont4", MODULE_XYZ_VERSION2);
		final PrimaryTypeDefinition cont4 = load(cont4modelInfo);

		assertNotNull(findAttribute(cont4, "leaf43"));
		assertHasAutogeneratedKey(cont4, "cont4", WriteBehaviorType.PERSIST_AND_DELEGATE);

		final ModelInfo cont5modelInfo = PrimaryTypeGenerator.getModelInfoForPrimaryTypeDefinition(MODULE_NS2, "cont5", MODULE_XYZ_VERSION2);
		assertModelDoesNotExist(cont5modelInfo);

		// -----------------------------------------------------

		final ModelInfo cont1ExtensionModelInfo = PrimaryTypeExtensionGenerator.getModelInfoForPrimaryTypeExtensionDefinition(DEFAULT_TEST_TARGET, MODULE_NS1, "cont1");
		final PrimaryTypeExtensionDefinition cont1ext = load(cont1ExtensionModelInfo);
		assertRequiresTargetType(context, actualNmtProperties, cont1ext.getRequiresTargetType());
		assertSize(1, cont1ext.getExtendedModelElement());
		assertEquals(cont1modelInfo.toImpliedUrn(), cont1ext.getExtendedModelElement().get(0).getUrn());

		assertNotNull(findRemovedAttribute(cont1ext, "leaf12") != null);
		assertEmpty(cont1ext.getPrimaryTypeAssociationExtension());
		assertEmpty(cont1ext.getPrimaryTypeAttributeExtension());
		assertNull(cont1ext.getPrimaryTypeAttributeReplacement());
		assertNull(cont1ext.getPrimaryTypeRemoval());

		final ModelInfo cont2ExtensionModelInfo = PrimaryTypeExtensionGenerator.getModelInfoForPrimaryTypeExtensionDefinition(DEFAULT_TEST_TARGET, MODULE_NS1, "cont2");
		final PrimaryTypeExtensionDefinition cont2ext = load(cont2ExtensionModelInfo);
		assertRequiresTargetType(context, actualNmtProperties, cont2ext.getRequiresTargetType());
		assertSize(1, cont2ext.getExtendedModelElement());
		assertEquals(cont2modelInfo.toImpliedUrn(), cont2ext.getExtendedModelElement().get(0).getUrn());

		assertSize(1, cont2ext.getPrimaryTypeExtension().getPrimaryTypeAttribute());
		final PrimaryTypeAttribute leaf27 = cont2ext.getPrimaryTypeExtension().getPrimaryTypeAttribute().get(0);
		assertInstanceOf(StringType.class, leaf27.getType());

		assertEmpty(cont2ext.getPrimaryTypeExtension().getPrimaryTypeAction());
		assertEmpty(cont2ext.getPrimaryTypeAssociationExtension());
		assertEmpty(cont2ext.getPrimaryTypeAttributeExtension());
		assertEmpty(cont2ext.getPrimaryTypeAttributeRemoval());
		assertNull(cont2ext.getPrimaryTypeAttributeReplacement());
		assertNull(cont2ext.getPrimaryTypeRemoval());

		// -----------------------------------------------------

		final ModelInfo modelInfoForPrimaryTypeRelationshipDefinition = PrimaryTypeRelationshipGenerator.getModelInfoForPrimaryTypeRelationshipDefinition(DEFAULT_TEST_TARGET);
		final PrimaryTypeRelationshipDefinition rels = load(modelInfoForPrimaryTypeRelationshipDefinition);

		assertContainmentsCreatedCount(rels, 4);

		final PrimaryTypeContainment managedElementToCont1 = findAndAssertContainment(rels, Constants.MANAGEDELEMENT, "cont1");
		assertContainment(managedElementToCont1, context, actualNmtProperties, Constants.COM_TOP_MANAGEDELEMENT_STAR.getNamespace(), Constants.COM_TOP_MANAGEDELEMENT_STAR.getName(), Constants.COM_TOP_MANAGEDELEMENT_STAR.getVersion().toString(), MODULE_NS1, "cont1", MODULE_XYZ_VERSION1, null, 1L);

		final PrimaryTypeContainment managedElementToCont2 = findAndAssertContainment(rels, Constants.MANAGEDELEMENT, "cont2");
		assertContainment(managedElementToCont2, context, actualNmtProperties, Constants.COM_TOP_MANAGEDELEMENT_STAR.getNamespace(), Constants.COM_TOP_MANAGEDELEMENT_STAR.getName(), Constants.COM_TOP_MANAGEDELEMENT_STAR.getVersion().toString(), MODULE_NS1, "cont2", MODULE_XYZ_VERSION1, null, 1L);

		final PrimaryTypeContainment cont2ToCont3 = findAndAssertContainment(rels, "cont2", "cont3");
		assertContainment(cont2ToCont3, context, actualNmtProperties, MODULE_NS1, "cont2", MODULE_XYZ_VERSION1, MODULE_NS1, "cont3", MODULE_XYZ_VERSION1, null, 1L);

		final PrimaryTypeContainment managedElementToCont4 = findAndAssertContainment(rels, Constants.MANAGEDELEMENT, "cont4");
		assertContainment(managedElementToCont4, context, actualNmtProperties, Constants.COM_TOP_MANAGEDELEMENT_STAR.getNamespace(), Constants.COM_TOP_MANAGEDELEMENT_STAR.getName(), Constants.COM_TOP_MANAGEDELEMENT_STAR.getVersion().toString(), MODULE_NS2, "cont4", MODULE_XYZ_VERSION2, null, 1L);

		// -----------------------------------------------------

		final ModelInfo yangModuleOne = YangNameVersionUtil.getNetYangModelInfoForYam(MODULE_NS1, MODULE_NAME1, MODULE_REVISION1);
		assertModelExists(yangModuleOne);

		final ModelInfo yangModuleTwo = YangNameVersionUtil.getNetYangModelInfoForYam(MODULE_NS2, MODULE_NAME2, MODULE_REVISION2);
		assertModelExists(yangModuleTwo);

		// -----------------------------------------------------

		final ManagementInformationModelInformation mimInfo = loadCfmMimInfo(context, actualNmtProperties);
		assertSize(2, mimInfo.getSupportedMims().getMimMappedTo());

		assertHasSupportedMim(mimInfo, MODULE_NS1, MODULE_XYZ_VERSION1, yangModuleOne.toUrn());
		assertHasSupportedMim(mimInfo, MODULE_NS2, MODULE_XYZ_VERSION2, yangModuleTwo.toUrn());
	}

	@Test
	public void test___simple_augmentation___conformance_import() {

		final TransformerContext context = createContext(new File(TEST_SUB_DIR + "simple-augmentation/simple-augmentation1.yang"), new File(TEST_SUB_DIR + "simple-augmentation/simple-augmentation2.yang"));
		context.setFeatureHandling(FeatureHandling.REMOVE_ALL);

		YangTransformer2.transform(context);

		// -----------------------------------------------------

		final ModelInfo cont1modelInfo = PrimaryTypeGenerator.getModelInfoForPrimaryTypeDefinition(MODULE_NS1, "cont1", MODULE_XYZ_VERSION1);
		assertModelExists(cont1modelInfo);

		final ModelInfo cont2modelInfo = PrimaryTypeGenerator.getModelInfoForPrimaryTypeDefinition(MODULE_NS1, "cont2", MODULE_XYZ_VERSION1);
		assertModelExists(cont2modelInfo);

		final ModelInfo cont4modelInfo = PrimaryTypeGenerator.getModelInfoForPrimaryTypeDefinition(MODULE_NS2, "cont4", MODULE_XYZ_VERSION2);
		assertModelDoesNotExist(cont4modelInfo);

//		final ModelInfo cont5modelInfo = PrimaryTypeGenerator.getModelInfoForPrimaryTypeDefinition(MODULE_NS2, "cont5", MODULE_XYZ_VERSION2);
//		assertModelDoesNotExist(cont5modelInfo);

		// -----------------------------------------------------

		final ModelInfo modelInfoForPrimaryTypeRelationshipDefinition = PrimaryTypeRelationshipGenerator.getModelInfoForPrimaryTypeRelationshipDefinition(DEFAULT_TEST_TARGET);
		final PrimaryTypeRelationshipDefinition rels = load(modelInfoForPrimaryTypeRelationshipDefinition);

//		assertContainmentsCreatedCount(rels, 3);

		final PrimaryTypeContainment managedElementToCont1 = findAndAssertContainment(rels, Constants.MANAGEDELEMENT, "cont1");
		assertContainment(managedElementToCont1, context, null, Constants.COM_TOP_MANAGEDELEMENT_STAR.getNamespace(), Constants.COM_TOP_MANAGEDELEMENT_STAR.getName(), Constants.COM_TOP_MANAGEDELEMENT_STAR.getVersion().toString(), MODULE_NS1, "cont1", MODULE_XYZ_VERSION1, null, 1L);

		final PrimaryTypeContainment managedElementToCont2 = findAndAssertContainment(rels, Constants.MANAGEDELEMENT, "cont2");
		assertContainment(managedElementToCont2, context, null, Constants.COM_TOP_MANAGEDELEMENT_STAR.getNamespace(), Constants.COM_TOP_MANAGEDELEMENT_STAR.getName(), Constants.COM_TOP_MANAGEDELEMENT_STAR.getVersion().toString(), MODULE_NS1, "cont2", MODULE_XYZ_VERSION1, null, 1L);

		final PrimaryTypeContainment cont2ToCont3 = findAndAssertContainment(rels, "cont2", "cont3");
		assertContainment(cont2ToCont3, context, null, MODULE_NS1, "cont2", MODULE_XYZ_VERSION1, MODULE_NS1, "cont3", MODULE_XYZ_VERSION1, null, 1L);

		// -----------------------------------------------------

		final ModelInfo yangModuleOne = YangNameVersionUtil.getNetYangModelInfoForYam(MODULE_NS1, MODULE_NAME1, MODULE_REVISION1);
		assertModelExists(yangModuleOne);

		final ModelInfo yangModuleTwo = YangNameVersionUtil.getNetYangModelInfoForYam(MODULE_NS2, MODULE_NAME2, MODULE_REVISION2);
		assertModelExists(yangModuleTwo);

		// -----------------------------------------------------

		final ManagementInformationModelInformation mimInfo = loadCfmMimInfo(context, null);
		assertSize(2, mimInfo.getSupportedMims().getMimMappedTo());

		assertHasSupportedMimModule(mimInfo, MODULE_NS1, MODULE_XYZ_VERSION1, yangModuleOne.toUrn(), CfmMimInfoSupport.CONFORMANCE_IMPLEMENT, CfmMimInfoSupport.FEATURE_HANDLING_ALL_REMOVED, Collections.emptyList(), MODULE_NAME1);
		assertHasSupportedMimModule(mimInfo, MODULE_NS2, MODULE_XYZ_VERSION2, yangModuleTwo.toUrn(), CfmMimInfoSupport.CONFORMANCE_IMPORT, CfmMimInfoSupport.FEATURE_HANDLING_ALL_REMOVED, Collections.emptyList(), MODULE_NAME2);
	}
}
