package com.ericsson.oss.mediation.modeling.yangtools.transformer2.test.generate.various;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;

import java.io.File;

import org.junit.Test;

import com.ericsson.oss.itpf.datalayer.dps.modeling.modelservice.typed.persistence.primarytype.HierarchicalPrimaryTypeSpecification;
import com.ericsson.oss.itpf.datalayer.dps.modeling.schema.gen.dps_common.WriteBehaviorType;
import com.ericsson.oss.itpf.datalayer.dps.modeling.schema.gen.dps_primarytype.PrimaryTypeDefinition;
import com.ericsson.oss.itpf.datalayer.dps.modeling.schema.gen.dps_primarytype_ext.PrimaryTypeExtensionDefinition;
import com.ericsson.oss.itpf.modeling.common.info.ModelInfo;
import com.ericsson.oss.itpf.modeling.modelservice.typed.core.edt.EnumDataTypeSpecification;
import com.ericsson.oss.itpf.modeling.schema.gen.oss_edt.EnumDataTypeDefinition;
import com.ericsson.oss.itpf.modeling.schema.gen.oss_edt_ext.EnumDataTypeExtensionDefinition;
import com.ericsson.oss.mediation.modeling.yangtools.transformer2.TransformerContext;
import com.ericsson.oss.mediation.modeling.yangtools.transformer2.YangTransformer2;
import com.ericsson.oss.mediation.modeling.yangtools.transformer2.generate.EnumerationTypeGenerator;
import com.ericsson.oss.mediation.modeling.yangtools.transformer2.generate.IdentityRefGenerator;
import com.ericsson.oss.mediation.modeling.yangtools.transformer2.generate.PrimaryTypeExtensionGenerator;
import com.ericsson.oss.mediation.modeling.yangtools.transformer2.generate.PrimaryTypeGenerator;
import com.ericsson.oss.mediation.modeling.yangtools.transformer2.testutils.TransformerTestUtil;

public class SubmoduleHandlingTest extends TransformerTestUtil {

	private static final String TEST_SUB_DIR = TEST_MODULES_DIR + "various/";

	private static final String MODULE_NS = "urn>test>module";
	private static final String MODULE_XYZ_VERSION = "2021.12.21";

	/*
	 * In this test, the complete contents of a module comes from a submodule. This triggers
	 * special handling inasmuch the contents should be generated into th extension, as discussed
	 * in the ReadMe.
	 */
	@Test
	public void test___submodule_handling() {

		final TransformerContext context = createContext(new File(TEST_SUB_DIR + "submodule-handling"));
		YangTransformer2.transform(context);

		// -----------------------------------------------------

		final ModelInfo cont1modelInfo = PrimaryTypeGenerator.getModelInfoForPrimaryTypeDefinition(MODULE_NS, "cont1", MODULE_XYZ_VERSION);
		final PrimaryTypeDefinition cont1 = load(cont1modelInfo);

		assertSize(1, cont1.getPrimaryTypeAttribute());	// only the auto-generated key
		assertHasAutogeneratedKey(cont1, "cont1", WriteBehaviorType.PERSIST_AND_DELEGATE);

		assertNull(findAttribute(cont1, "leaf11"));		// should sit in the extension
		assertNull(findAttribute(cont1, "leaf12"));		// should sit in the extension
		assertNull(findAttribute(cont1, "leaf14"));		// should sit in the extension
		assertNull(findAttribute(cont1, "leaf15"));		// should sit in the extension
		assertEmpty(cont1.getChoice());					// should sit in the extension

		assertModelDoesNotExist(EnumerationTypeGenerator.getModelInfoForEdtInOriginal(MODULE_NS, "cont1__leaf12", MODULE_XYZ_VERSION, null));

		// -----------------------------------------------------

		final ModelInfo cont1extModelInfo = PrimaryTypeExtensionGenerator.getModelInfoForPrimaryTypeExtensionDefinition(DEFAULT_TEST_TARGET, MODULE_NS, "cont1");
		final PrimaryTypeExtensionDefinition cont1ext = load(cont1extModelInfo);

		assertNotNull(findAddedAttribute(cont1ext, "leaf11"));
		assertNotNull(findAddedAttribute(cont1ext, "leaf12"));
		assertNotNull(findAddedAttribute(cont1ext, "leaf14"));
		assertNotNull(findAddedAttribute(cont1ext, "leaf15"));
		assertNotNull(findAddedOrReplacedChoice(cont1ext, "choice13"));

		final ModelInfo leaf12EnumModelInfo = EnumerationTypeGenerator.getModelInfoForEdtInDeviated(DEFAULT_TEST_TARGET, MODULE_NS, "cont1__leaf12", null);
		final EnumDataTypeDefinition leaf12Edt = load(leaf12EnumModelInfo);
		assertSize(2, leaf12Edt.getMember());

		// -----------------------------------------------------

		final ModelInfo modelInfoId1Enum = IdentityRefGenerator.getModelInfoForIdentityWithSingleBase(MODULE_NS, "id-1", MODULE_XYZ_VERSION);
		final EnumDataTypeDefinition id1Enum = load(modelInfoId1Enum);

		assertEmpty(id1Enum.getMember());		// should all sit in the extension

		final ModelInfo modelInfoId1EnumExt = IdentityRefGenerator.getModelInfoForExtension(DEFAULT_TEST_TARGET, MODULE_NS, "id-1");
		final EnumDataTypeExtensionDefinition id1EnumExt = load(modelInfoId1EnumExt);

		assertNotNull(findAndAssertAddedEnumMember(id1EnumExt, "id-1"));
		assertNotNull(findAndAssertAddedEnumMember(id1EnumExt, "id-2"));
		assertNotNull(findAndAssertAddedEnumMember(id1EnumExt, "id-3"));

		// -----------------------------------------------------

		final ModelInfo list2modelInfo = PrimaryTypeGenerator.getModelInfoForPrimaryTypeDefinition(MODULE_NS, "list2", MODULE_XYZ_VERSION);
		final PrimaryTypeDefinition list2 = load(list2modelInfo);

		assertSize(1, list2.getPrimaryTypeAttribute());	// only the list key
		assertNotNull(findAttribute(list2, "leaf21"));

		assertNull(findAttribute(list2, "leaf22"));		// should sit in the extension

		// -----------------------------------------------------

		final ModelInfo list2extModelInfo = PrimaryTypeExtensionGenerator.getModelInfoForPrimaryTypeExtensionDefinition(DEFAULT_TEST_TARGET, MODULE_NS, "list2");
		final PrimaryTypeExtensionDefinition list2ext = load(list2extModelInfo);

		assertNotNull(findAddedAttribute(list2ext, "leaf22"));

		// =====================================================================================================================
		// =====================================================================================================================
		// =====================================================================================================================

		processAndDeployIntoModelService();

		final HierarchicalPrimaryTypeSpecification cont1spec = modelService.getTypedAccess().getEModelSpecification(cont1modelInfo, HierarchicalPrimaryTypeSpecification.class, getModelServiceTarget(context, null));

		assertSize(5, cont1spec.getAttributeSpecifications());		// +1 for the auto-gen key
		assertNotNull(findAttribute(cont1spec, "leaf11"));
		assertNotNull(findAttribute(cont1spec, "leaf12"));
		assertNotNull(findAttribute(cont1spec, "leaf14"));
		assertNotNull(findAttribute(cont1spec, "leaf15"));
		assertNotNull(findChoice(cont1spec.getChoices(), "choice13"));

		assertEquals(leaf12EnumModelInfo, findAttribute(cont1spec, "leaf12").getDataTypeSpecification().getReferencedDataType());

		final EnumDataTypeSpecification leaf12EnumSpec = modelService.getTypedAccess().getEModelSpecification(leaf12EnumModelInfo, EnumDataTypeSpecification.class, getModelServiceTarget(context, null));
		assertSize(2, leaf12EnumSpec.getAllMembers());

		final HierarchicalPrimaryTypeSpecification list2spec = modelService.getTypedAccess().getEModelSpecification(list2modelInfo, HierarchicalPrimaryTypeSpecification.class, getModelServiceTarget(context, null));
		assertNotNull(findAttribute(list2spec, "leaf21"));
		assertNotNull(findAttribute(list2spec, "leaf22"));

		assertEquals(modelInfoId1Enum, findAttribute(list2spec, "leaf21").getDataTypeSpecification().getReferencedDataType());

		final EnumDataTypeSpecification id1EnumSpec = modelService.getTypedAccess().getEModelSpecification(modelInfoId1Enum, EnumDataTypeSpecification.class, getModelServiceTarget(context, null));
		assertSize(3, id1EnumSpec.getAllMembers());
	}
}
