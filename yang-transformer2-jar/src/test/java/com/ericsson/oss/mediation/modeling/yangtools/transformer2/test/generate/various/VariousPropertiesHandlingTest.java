package com.ericsson.oss.mediation.modeling.yangtools.transformer2.test.generate.various;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;

import java.io.File;
import java.util.Arrays;

import org.junit.Test;

import com.ericsson.oss.itpf.datalayer.dps.modeling.modelservice.typed.persistence.ReadBehavior;
import com.ericsson.oss.itpf.datalayer.dps.modeling.modelservice.typed.persistence.WriteBehavior;
import com.ericsson.oss.itpf.datalayer.dps.modeling.modelservice.typed.persistence.primarytype.HierarchicalPrimaryTypeSpecification;
import com.ericsson.oss.itpf.datalayer.dps.modeling.modelservice.typed.persistence.primarytype.PrimaryTypeAttributeSpecification;
import com.ericsson.oss.itpf.datalayer.dps.modeling.schema.gen.dps_common.ReadBehaviorType;
import com.ericsson.oss.itpf.datalayer.dps.modeling.schema.gen.dps_common.WriteBehaviorType;
import com.ericsson.oss.itpf.datalayer.dps.modeling.schema.gen.dps_primarytype.PrimaryTypeAttribute;
import com.ericsson.oss.itpf.datalayer.dps.modeling.schema.gen.dps_primarytype.PrimaryTypeDefinition;
import com.ericsson.oss.itpf.datalayer.dps.modeling.schema.gen.dps_primarytype_ext.PrimaryTypeExtensionDefinition;
import com.ericsson.oss.itpf.modeling.common.info.ModelInfo;
import com.ericsson.oss.mediation.modeling.yangtools.transformer2.Constants;
import com.ericsson.oss.mediation.modeling.yangtools.transformer2.TransformerContext;
import com.ericsson.oss.mediation.modeling.yangtools.transformer2.YangTransformer2;
import com.ericsson.oss.mediation.modeling.yangtools.transformer2.generate.PrimaryTypeExtensionGenerator;
import com.ericsson.oss.mediation.modeling.yangtools.transformer2.generate.PrimaryTypeGenerator;
import com.ericsson.oss.mediation.modeling.yangtools.transformer2.testutils.TransformerTestUtil;
import com.ericsson.oss.mediation.modeling.yangtools.validator.standalone.enm.ValidatorFindingTypeEnm;

public class VariousPropertiesHandlingTest extends TransformerTestUtil {

	private static final String TEST_SUB_DIR = TEST_MODULES_DIR + "various/";

	private static final String MODULE_NS_KH = "urn;test;key-handling";
	private static final String MODULE_XYZ_VERSION_KH = "2021.4.21";

	@SuppressWarnings("deprecation")
	@Test
	public void test___key_handling() {

		additionallyIgnoreFindingDuringValidation(ValidatorFindingTypeEnm.N667_KEYLESS_READONLY_LIST_NOT_SUPPORTED.toString());
		additionallyIgnoreFindingDuringValidation(ValidatorFindingTypeEnm.N674_MORE_THAN_ONE_KEY.toString());

		final TransformerContext context = createContextWith3ppModules(Arrays.asList(new File(TEST_SUB_DIR + "key-handling")));
		YangTransformer2.transform(context);

		// -----------------------------------------------------

		final ModelInfo cont1modelInfo = PrimaryTypeGenerator.getModelInfoForPrimaryTypeDefinition(MODULE_NS_KH, "cont1", MODULE_XYZ_VERSION_KH);
		final PrimaryTypeDefinition cont1 = load(cont1modelInfo);
		assertHasMeta(Constants.META_PRESENCE_CONTAINER, cont1);
		assertHasNotMeta(Constants.META_NON_PRESENCE_CONTAINER, cont1);
		assertHasAutogeneratedKey(cont1, "cont1", WriteBehaviorType.PERSIST_AND_DELEGATE);

		final ModelInfo list2modelInfo = PrimaryTypeGenerator.getModelInfoForPrimaryTypeDefinition(MODULE_NS_KH, "list2", MODULE_XYZ_VERSION_KH);
		final PrimaryTypeDefinition list2 = load(list2modelInfo);
		assertNull(list2.getMultiKey());
		assertHasNotMeta(Constants.META_MULTIPLE_KEY_NAMES, list2);

		final PrimaryTypeAttribute leaf21 = findAttribute(list2, "leaf21");
		assertTrue(leaf21.isKey());
		assertTrue(leaf21.isMandatory());
		assertTrue(leaf21.isImmutable());
		assertReadBehaviour(ReadBehaviorType.FROM_PERSISTENCE, leaf21);
		assertWriteBehaviour(WriteBehaviorType.PERSIST_AND_DELEGATE, leaf21);

		final ModelInfo list3modelInfo = PrimaryTypeGenerator.getModelInfoForPrimaryTypeDefinition(MODULE_NS_KH, "list3", MODULE_XYZ_VERSION_KH);
		final PrimaryTypeDefinition list3 = load(list3modelInfo);
		assertNotNull(list3.getMultiKey());
		assertTrue(list3.getMultiKey().getKeyParts().size() == 2);
		assertTrue(list3.getMultiKey().getKeyParts().get(0).equals("leaf31"));
		assertTrue(list3.getMultiKey().getKeyParts().get(1).equals("leaf32"));
		assertTrue(list3.getMultiKey().getDelimiter().equals(".."));
		assertHasNotMeta(Constants.META_MULTIPLE_KEY_NAMES, list3);

		final PrimaryTypeAttribute leaf31 = findAttribute(list3, "leaf31");
		assertTrue(leaf31.isKey());
		assertTrue(leaf31.isMandatory());
		assertTrue(leaf31.isImmutable());
		assertReadBehaviour(ReadBehaviorType.FROM_PERSISTENCE, leaf31);
		assertWriteBehaviour(WriteBehaviorType.PERSIST_AND_DELEGATE, leaf31);

		final PrimaryTypeAttribute leaf32 = findAttribute(list3, "leaf32");
		assertTrue(leaf32.isKey());
		assertTrue(leaf32.isMandatory());
		assertTrue(leaf32.isImmutable());
		assertReadBehaviour(ReadBehaviorType.FROM_PERSISTENCE, leaf32);
		assertWriteBehaviour(WriteBehaviorType.PERSIST_AND_DELEGATE, leaf32);

		final PrimaryTypeAttribute leaf33 = findAttribute(list3, "leaf33");
		assertFalse(leaf33.isKey());
		assertFalse(leaf33.isMandatory());
		assertFalse(leaf33.isImmutable());
		assertReadBehaviour(ReadBehaviorType.FROM_PERSISTENCE, leaf33);
		assertWriteBehaviour(WriteBehaviorType.PERSIST_AND_DELEGATE, leaf33);

		final ModelInfo cont5modelInfo = PrimaryTypeGenerator.getModelInfoForPrimaryTypeDefinition(MODULE_NS_KH, "cont5", MODULE_XYZ_VERSION_KH);
		final PrimaryTypeDefinition cont5 = load(cont5modelInfo);
		assertHasNotMeta(Constants.META_PRESENCE_CONTAINER, cont5);
		assertHasMeta(Constants.META_NON_PRESENCE_CONTAINER, cont5);
		assertHasAutogeneratedKey(cont5, "cont5", WriteBehaviorType.NOT_ALLOWED);

		final ModelInfo list6modelInfo = PrimaryTypeGenerator.getModelInfoForPrimaryTypeDefinition(MODULE_NS_KH, "list6", MODULE_XYZ_VERSION_KH);
		final PrimaryTypeDefinition list6 = load(list6modelInfo);
		assertHasMeta(Constants.META_KEYLESS_LIST, list6);
		assertNull(list6.getMultiKey());
		assertHasNotMeta(Constants.META_MULTIPLE_KEY_NAMES, list6);

		final PrimaryTypeAttribute leaf61 = findAttribute(list6, "leaf61");
		assertFalse(leaf61.isKey());
		assertFalse(leaf61.isMandatory());
		assertFalse(leaf61.isImmutable());
		assertReadBehaviour(ReadBehaviorType.FROM_PERSISTENCE, leaf61);
		assertWriteBehaviour(WriteBehaviorType.NOT_ALLOWED, leaf61);

		final ModelInfo list8modelInfo = PrimaryTypeGenerator.getModelInfoForPrimaryTypeDefinition(MODULE_NS_KH, "list8", MODULE_XYZ_VERSION_KH);
		final PrimaryTypeDefinition list8 = load(list8modelInfo);
		assertNotNull(list8.getMultiKey());
		assertSize(2, list8.getMultiKey().getKeyParts());
		assertEquals("leaf81", list8.getMultiKey().getKeyParts().get(0));
		assertEquals("leaf82", list8.getMultiKey().getKeyParts().get(1));
		assertEquals("..", list8.getMultiKey().getDelimiter());

		final PrimaryTypeAttribute leaf81 = findAttribute(list8, "leaf81");
		assertTrue(leaf81.isKey());
		assertTrue(leaf81.isMandatory());
		assertTrue(leaf81.isImmutable());
		assertReadBehaviour(ReadBehaviorType.FROM_PERSISTENCE, leaf81);
		assertWriteBehaviour(WriteBehaviorType.NOT_ALLOWED, leaf81);

		final PrimaryTypeAttribute leaf82 = findAttribute(list8, "leaf82");
		assertTrue(leaf82.isKey());
		assertTrue(leaf82.isMandatory());
		assertTrue(leaf82.isImmutable());
		assertReadBehaviour(ReadBehaviorType.FROM_PERSISTENCE, leaf82);
		assertWriteBehaviour(WriteBehaviorType.NOT_ALLOWED, leaf82);

		// =====================================================================================================================
		// =====================================================================================================================
		// =====================================================================================================================

		processAndDeployIntoModelService();

		final HierarchicalPrimaryTypeSpecification cont1spec = modelService.getTypedAccess().getEModelSpecification(cont1modelInfo, HierarchicalPrimaryTypeSpecification.class, getModelServiceTarget(context, null));
		assertEquals(ReadBehavior.FROM_PERSISTENCE, cont1spec.getReadBehavior());
		assertEquals(WriteBehavior.PERSIST_AND_DELEGATE, cont1spec.getWriteBehavior());
		assertHasMetaInModelService(Constants.META_PRESENCE_CONTAINER, cont1spec);
		assertHasNotMetaInModelService(Constants.META_NON_PRESENCE_CONTAINER, cont1spec);
		assertSize(1, cont1spec.getAttributeSpecifications());		// 1 = auto-generated key

		final PrimaryTypeAttributeSpecification cont1key = findAttribute(cont1spec, "cont1-key");
		assertTrue(cont1key.isKey());
		assertTrue(cont1key.isMandatory());
		assertTrue(cont1key.isImmutable());
		assertEquals(ReadBehavior.FROM_PERSISTENCE, cont1key.getReadBehavior());
		assertEquals(WriteBehavior.PERSIST_AND_DELEGATE, cont1key.getWriteBehavior());

		final HierarchicalPrimaryTypeSpecification list2spec = modelService.getTypedAccess().getEModelSpecification(list2modelInfo, HierarchicalPrimaryTypeSpecification.class, getModelServiceTarget(context, null));
		assertTrue(list2spec.getKeyAttributeName().equals("leaf21"));
		assertSize(1, list2spec.getKeyAttributeNames());
		assertEquals("leaf21", list2spec.getKeyAttributeNames().get(0));
		assertNull(list2spec.getMultiKeyDelimiter());
		assertNull(list2spec.getCompoundKey());
		assertEquals(ReadBehavior.FROM_PERSISTENCE, list2spec.getReadBehavior());
		assertEquals(WriteBehavior.PERSIST_AND_DELEGATE, list2spec.getWriteBehavior());
		assertSize(1, list2spec.getAttributeSpecifications());		// 1 = leaf21

		final PrimaryTypeAttributeSpecification attr21 = findAttribute(list2spec, "leaf21");
		assertTrue(attr21.isKey());
		assertTrue(attr21.isMandatory());
		assertTrue(attr21.isImmutable());
		assertEquals(ReadBehavior.FROM_PERSISTENCE, attr21.getReadBehavior());
		assertEquals(WriteBehavior.PERSIST_AND_DELEGATE, attr21.getWriteBehavior());

		final HierarchicalPrimaryTypeSpecification list3spec = modelService.getTypedAccess().getEModelSpecification(list3modelInfo, HierarchicalPrimaryTypeSpecification.class, getModelServiceTarget(context, null));
		assertSize(2, list3spec.getKeyAttributeNames());
		assertEquals("leaf31", list3spec.getKeyAttributeNames().get(0));
		assertEquals("leaf32", list3spec.getKeyAttributeNames().get(1));
		assertEquals("..", list3spec.getMultiKeyDelimiter());
		assertNull(list3spec.getCompoundKey());
		assertEquals(ReadBehavior.FROM_PERSISTENCE, list3spec.getReadBehavior());
		assertEquals(WriteBehavior.PERSIST_AND_DELEGATE, list3spec.getWriteBehavior());
		assertSize(3, list3spec.getAttributeSpecifications());		// 3 = leaf31 + leaf32 + leaf33

		final PrimaryTypeAttributeSpecification attr31 = findAttribute(list3spec, "leaf31");
		assertTrue(attr31.isKey());
		assertTrue(attr31.isMandatory());
		assertTrue(attr31.isImmutable());
		assertEquals(ReadBehavior.FROM_PERSISTENCE, attr31.getReadBehavior());
		assertEquals(WriteBehavior.PERSIST_AND_DELEGATE, attr31.getWriteBehavior());

		final PrimaryTypeAttributeSpecification attr32 = findAttribute(list3spec, "leaf32");
		assertTrue(attr32.isKey());
		assertTrue(attr32.isMandatory());
		assertTrue(attr32.isImmutable());
		assertEquals(ReadBehavior.FROM_PERSISTENCE, attr32.getReadBehavior());
		assertEquals(WriteBehavior.PERSIST_AND_DELEGATE, attr32.getWriteBehavior());

		final PrimaryTypeAttributeSpecification attr33 = findAttribute(list3spec, "leaf33");
		assertFalse(attr33.isKey());
		assertFalse(attr33.isMandatory());
		assertFalse(attr33.isImmutable());
		assertEquals(ReadBehavior.FROM_PERSISTENCE, attr33.getReadBehavior());
		assertEquals(WriteBehavior.PERSIST_AND_DELEGATE, attr33.getWriteBehavior());

		final HierarchicalPrimaryTypeSpecification cont5spec = modelService.getTypedAccess().getEModelSpecification(cont5modelInfo, HierarchicalPrimaryTypeSpecification.class, getModelServiceTarget(context, null));
		assertEquals(ReadBehavior.FROM_PERSISTENCE, cont5spec.getReadBehavior());
		assertEquals(WriteBehavior.NOT_ALLOWED, cont5spec.getWriteBehavior());
		assertHasNotMetaInModelService(Constants.META_PRESENCE_CONTAINER, cont5spec);
		assertHasMetaInModelService(Constants.META_NON_PRESENCE_CONTAINER, cont5spec);
		assertSize(1, cont5spec.getAttributeSpecifications());		// 1 = auto-generated key

		final PrimaryTypeAttributeSpecification cont5key = findAttribute(cont5spec, "cont5-key");
		assertTrue(cont5key.isKey());
		assertTrue(cont5key.isMandatory());
		assertTrue(cont5key.isImmutable());
		assertEquals(ReadBehavior.FROM_PERSISTENCE, cont5key.getReadBehavior());
		assertEquals(WriteBehavior.NOT_ALLOWED, cont5key.getWriteBehavior());

		final HierarchicalPrimaryTypeSpecification list6spec = modelService.getTypedAccess().getEModelSpecification(list6modelInfo, HierarchicalPrimaryTypeSpecification.class, getModelServiceTarget(context, null));
		assertHasMetaInModelService(Constants.META_KEYLESS_LIST, list6spec);
		assertSize(1, list6spec.getKeyAttributeNames());
		assertEquals("list6-key", list6spec.getKeyAttributeNames().get(0));
		assertNull(list6spec.getCompoundKey());
		assertEquals(ReadBehavior.FROM_PERSISTENCE, list6spec.getReadBehavior());
		assertEquals(WriteBehavior.NOT_ALLOWED, list6spec.getWriteBehavior());
		assertSize(2, list6spec.getAttributeSpecifications());		// 2 = auto-generated key (for keyless list)

		final PrimaryTypeAttributeSpecification list6key = findAttribute(list6spec, "list6-key");
		assertTrue(list6key.isKey());
		assertTrue(list6key.isMandatory());
		assertTrue(list6key.isImmutable());
		assertEquals(ReadBehavior.FROM_PERSISTENCE, list6key.getReadBehavior());
		assertEquals(WriteBehavior.NOT_ALLOWED, list6key.getWriteBehavior());

		final PrimaryTypeAttributeSpecification attr61 = findAttribute(list6spec, "leaf61");
		assertFalse(attr61.isKey());
		assertFalse(attr61.isMandatory());
		assertFalse(attr61.isImmutable());
		assertEquals(ReadBehavior.FROM_PERSISTENCE, attr61.getReadBehavior());
		assertEquals(WriteBehavior.NOT_ALLOWED, attr61.getWriteBehavior());

		final HierarchicalPrimaryTypeSpecification list8spec = modelService.getTypedAccess().getEModelSpecification(list8modelInfo, HierarchicalPrimaryTypeSpecification.class, getModelServiceTarget(context, null));
		assertSize(2, list8spec.getKeyAttributeNames());
		assertEquals("leaf81", list8spec.getKeyAttributeNames().get(0));
		assertEquals("leaf82", list8spec.getKeyAttributeNames().get(1));
		assertEquals("..", list8spec.getMultiKeyDelimiter());
		assertNull(list8spec.getCompoundKey());
		assertEquals(ReadBehavior.FROM_PERSISTENCE, list8spec.getReadBehavior());
		assertEquals(WriteBehavior.NOT_ALLOWED, list8spec.getWriteBehavior());
		assertSize(2, list8spec.getAttributeSpecifications());		// 2 = leaf81 + leaf82

		final PrimaryTypeAttributeSpecification attr81 = findAttribute(list8spec, "leaf81");
		assertTrue(attr81.isKey());
		assertTrue(attr81.isMandatory());
		assertTrue(attr81.isImmutable());
		assertEquals(ReadBehavior.FROM_PERSISTENCE, attr81.getReadBehavior());
		assertEquals(WriteBehavior.NOT_ALLOWED, attr81.getWriteBehavior());

		final PrimaryTypeAttributeSpecification attr82 = findAttribute(list8spec, "leaf82");
		assertTrue(attr82.isKey());
		assertTrue(attr82.isMandatory());
		assertTrue(attr82.isImmutable());
		assertEquals(ReadBehavior.FROM_PERSISTENCE, attr82.getReadBehavior());
		assertEquals(WriteBehavior.NOT_ALLOWED, attr82.getWriteBehavior());
	}

	private static final String MODULE_NS_MIS = "urn?test?mandatory-immutable-sensitive-handling";
	private static final String MODULE_XYZ_VERSION_MIS = "2021.3.7";

	@Test
	public void test___mandatory_immutable_sensitive_handling() {

		additionallyIgnoreFindingDuringValidation(ValidatorFindingTypeEnm.N671_UNSUPPORTED_EXTENSION.toString());

		final TransformerContext context = createContextWith3ppModules(Arrays.asList(new File(TEST_SUB_DIR + "mandatory-immutable-sensitive-handling"), new File(IANA_CRYPT_HASH)));
		YangTransformer2.transform(context);

		// -----------------------------------------------------

		final ModelInfo list1modelInfo = PrimaryTypeGenerator.getModelInfoForPrimaryTypeDefinition(MODULE_NS_MIS, "list1", MODULE_XYZ_VERSION_MIS);
		final PrimaryTypeDefinition list1 = load(list1modelInfo);

		final PrimaryTypeAttribute leaf11 = findAttribute(list1, "leaf11");
		assertTrue(leaf11.isKey());
		assertTrue(leaf11.isMandatory());
		assertTrue(leaf11.isImmutable());
		assertFalse(leaf11.isSensitive());

		final PrimaryTypeAttribute leaf12 = findAttribute(list1, "leaf12");
		assertTrue(leaf12.isMandatory());
		assertFalse(leaf12.isImmutable());

		final PrimaryTypeAttribute leaf13 = findAttribute(list1, "leaf13");
		assertTrue(leaf13.isMandatory());		// will be overwritten in extension
		assertFalse(leaf13.isImmutable());

		final PrimaryTypeAttribute leaf14 = findAttribute(list1, "leaf14");
		assertFalse(leaf14.isMandatory());
		assertFalse(leaf14.isImmutable());

		final PrimaryTypeAttribute leaf15 = findAttribute(list1, "leaf15");
		assertFalse(leaf15.isMandatory());		// will be overwritten in extension
		assertFalse(leaf15.isImmutable());

		final PrimaryTypeAttribute leaf16 = findAttribute(list1, "leaflist16");
		assertFalse(leaf16.isMandatory());
		assertFalse(leaf16.isImmutable());

		final PrimaryTypeAttribute leaf17 = findAttribute(list1, "leaflist17");
		assertTrue(leaf17.isMandatory());
		assertFalse(leaf17.isImmutable());

		final ModelInfo list2modelInfo = PrimaryTypeGenerator.getModelInfoForPrimaryTypeDefinition(MODULE_NS_MIS, "list2", MODULE_XYZ_VERSION_MIS);
		final PrimaryTypeDefinition list2 = load(list2modelInfo);

		final PrimaryTypeAttribute leaf21 = findAttribute(list2, "leaf21");
		assertTrue(leaf21.isKey());
		assertTrue(leaf21.isMandatory());
		assertTrue(leaf21.isImmutable());

		final PrimaryTypeAttribute leaf22 = findAttribute(list2, "leaf22");
		assertFalse(leaf22.isMandatory());
		assertFalse(leaf22.isImmutable());

		final PrimaryTypeAttribute leaf23 = findAttribute(list2, "leaf23");
		assertFalse(leaf23.isMandatory());		// will NOT be overwritten in extension, as the value will always be 'false', hence no reson to generate an extension for it
		assertFalse(leaf23.isImmutable());

		final ModelInfo cont4modelInfo = PrimaryTypeGenerator.getModelInfoForPrimaryTypeDefinition(MODULE_NS_MIS, "cont4", MODULE_XYZ_VERSION_MIS);
		final PrimaryTypeDefinition cont4 = load(cont4modelInfo);

		final PrimaryTypeAttribute leaf41 = findAttribute(cont4, "leaf41");
		assertFalse(leaf41.isMandatory());
		assertTrue(leaf41.isImmutable());

		final PrimaryTypeAttribute leaf42 = findAttribute(cont4, "leaf42");
		assertFalse(leaf42.isMandatory());
		assertTrue(leaf42.isImmutable());		// will be overwritten in extension

		final PrimaryTypeAttribute leaf43 = findAttribute(cont4, "leaf43");
		assertTrue(leaf43.isMandatory());
		assertTrue(leaf43.isImmutable());

		final ModelInfo cont5modelInfo = PrimaryTypeGenerator.getModelInfoForPrimaryTypeDefinition(MODULE_NS_MIS, "cont5", MODULE_XYZ_VERSION_MIS);
		final PrimaryTypeDefinition cont5 = load(cont5modelInfo);

		final PrimaryTypeAttribute leaf51 = findAttribute(cont5, "leaf51");
		assertFalse(leaf51.isMandatory());
		assertTrue(leaf51.isImmutable());

		final PrimaryTypeAttribute leaf52 = findAttribute(cont5, "leaf52");
		assertFalse(leaf52.isMandatory());
		assertTrue(leaf52.isImmutable());		// will be overwritten in extension

		final PrimaryTypeAttribute leaf53 = findAttribute(cont5, "leaf53");
		assertTrue(leaf53.isMandatory());
		assertTrue(leaf53.isImmutable());

		final ModelInfo cont6modelInfo = PrimaryTypeGenerator.getModelInfoForPrimaryTypeDefinition(MODULE_NS_MIS, "cont6", MODULE_XYZ_VERSION_MIS);
		final PrimaryTypeDefinition cont6 = load(cont6modelInfo);

		final PrimaryTypeAttribute leaf61 = findAttribute(cont6, "leaf61");
		assertFalse(leaf61.isSensitive());

		final PrimaryTypeAttribute leaf62 = findAttribute(cont6, "leaf62");
		assertTrue(leaf62.isSensitive());

		final PrimaryTypeAttribute leaf63 = findAttribute(cont6, "leaf63");
		assertTrue(leaf63.isSensitive());

		final PrimaryTypeAttribute leaf64 = findAttribute(cont6, "leaf64");
		assertFalse(leaf64.isSensitive());		// will be overwritten in extension

		final PrimaryTypeAttribute leaf65 = findAttribute(cont6, "leaf65");
		assertTrue(leaf65.isSensitive());

		final PrimaryTypeAttribute leaf66 = findAttribute(cont6, "leaf66");
		assertTrue(leaf66.isSensitive());

		final PrimaryTypeAttribute leaf67 = findAttribute(cont6, "leaflist67");
		assertTrue(leaf67.isSensitive());

		// -----------------------------------------------------

		final ModelInfo list1ExtensionModelInfo = PrimaryTypeExtensionGenerator.getModelInfoForPrimaryTypeExtensionDefinition(DEFAULT_TEST_TARGET, MODULE_NS_MIS, "list1");
		final PrimaryTypeExtensionDefinition list1ext = load(list1ExtensionModelInfo);

		assertTrue(list1ext.getPrimaryTypeAttributeReplacement().getPrimaryTypeAttribute().size() == 2);
		final PrimaryTypeAttribute leaf13ext = findReplacedAttribute(list1ext, "leaf13");
		assertFalse(leaf13ext.isMandatory());
		assertFalse(leaf13ext.isImmutable());
		final PrimaryTypeAttribute leaf15ext = findReplacedAttribute(list1ext, "leaf15");
		assertTrue(leaf15ext.isMandatory());
		assertFalse(leaf15ext.isImmutable());

		final ModelInfo cont4ExtensionModelInfo = PrimaryTypeExtensionGenerator.getModelInfoForPrimaryTypeExtensionDefinition(DEFAULT_TEST_TARGET, MODULE_NS_MIS, "cont4");
		final PrimaryTypeExtensionDefinition cont4ext = load(cont4ExtensionModelInfo);

		assertTrue(cont4ext.getPrimaryTypeAttributeReplacement().getPrimaryTypeAttribute().size() == 1);
		final PrimaryTypeAttribute leaf42ext = findReplacedAttribute(cont4ext, "leaf42");
		assertFalse(leaf42ext.isMandatory());
		assertFalse(leaf42ext.isImmutable());

		final ModelInfo cont5ExtensionModelInfo = PrimaryTypeExtensionGenerator.getModelInfoForPrimaryTypeExtensionDefinition(DEFAULT_TEST_TARGET, MODULE_NS_MIS, "cont5");
		final PrimaryTypeExtensionDefinition cont5ext = load(cont5ExtensionModelInfo);

		assertTrue(cont5ext.getPrimaryTypeAttributeReplacement().getPrimaryTypeAttribute().size() == 1);
		final PrimaryTypeAttribute leaf52ext = findReplacedAttribute(cont5ext, "leaf52");
		assertFalse(leaf52ext.isMandatory());
		assertFalse(leaf52ext.isImmutable());

		final ModelInfo cont6ExtensionModelInfo = PrimaryTypeExtensionGenerator.getModelInfoForPrimaryTypeExtensionDefinition(DEFAULT_TEST_TARGET, MODULE_NS_MIS, "cont6");
		final PrimaryTypeExtensionDefinition cont6ext = load(cont6ExtensionModelInfo);

		assertTrue(cont6ext.getPrimaryTypeAttributeReplacement().getPrimaryTypeAttribute().size() == 1);
		final PrimaryTypeAttribute leaf64ext = findReplacedAttribute(cont6ext, "leaf64");
		assertTrue(leaf64ext.isSensitive());

		// =====================================================================================================================
		// =====================================================================================================================
		// =====================================================================================================================

		processAndDeployIntoModelService();

		final HierarchicalPrimaryTypeSpecification list1spec = modelService.getTypedAccess().getEModelSpecification(list1modelInfo, HierarchicalPrimaryTypeSpecification.class, getModelServiceTarget(context, null));

		final PrimaryTypeAttributeSpecification attr11 = findAttribute(list1spec, "leaf11");
		assertTrue(attr11.isKey());
		assertTrue(attr11.isMandatory());
		assertTrue(attr11.isImmutable());
		assertFalse(attr11.isSensitive());

		final PrimaryTypeAttributeSpecification attr12 = findAttribute(list1spec, "leaf12");
		assertTrue(attr12.isMandatory());
		assertFalse(attr12.isImmutable());

		final PrimaryTypeAttributeSpecification attr13 = findAttribute(list1spec, "leaf13");
		assertFalse(attr13.isMandatory());
		assertFalse(attr13.isImmutable());

		final PrimaryTypeAttributeSpecification attr14 = findAttribute(list1spec, "leaf14");
		assertFalse(attr14.isMandatory());
		assertFalse(attr14.isImmutable());

		final PrimaryTypeAttributeSpecification attr15 = findAttribute(list1spec, "leaf15");
		assertTrue(attr15.isMandatory());
		assertFalse(attr15.isImmutable());

		final HierarchicalPrimaryTypeSpecification list2spec = modelService.getTypedAccess().getEModelSpecification(list2modelInfo, HierarchicalPrimaryTypeSpecification.class, getModelServiceTarget(context, null));

		final PrimaryTypeAttributeSpecification attr21 = findAttribute(list2spec, "leaf21");
		assertTrue(attr21.isKey());
		assertTrue(attr21.isMandatory());
		assertTrue(attr21.isImmutable());

		final PrimaryTypeAttributeSpecification attr22 = findAttribute(list2spec, "leaf22");
		assertFalse(attr22.isMandatory());
		assertFalse(attr22.isImmutable());

		final PrimaryTypeAttributeSpecification attr23 = findAttribute(list2spec, "leaf23");
		assertFalse(attr23.isMandatory());
		assertFalse(attr23.isImmutable());

		final HierarchicalPrimaryTypeSpecification cont4spec = modelService.getTypedAccess().getEModelSpecification(cont4modelInfo, HierarchicalPrimaryTypeSpecification.class, getModelServiceTarget(context, null));

		final PrimaryTypeAttributeSpecification attr41 = findAttribute(cont4spec, "leaf41");
		assertFalse(attr41.isMandatory());
		assertTrue(attr41.isImmutable());

		final PrimaryTypeAttributeSpecification attr42 = findAttribute(cont4spec, "leaf42");
		assertFalse(attr42.isMandatory());
		assertFalse(attr42.isImmutable());
		assertFalse(attr42.isSensitive());

		final PrimaryTypeAttributeSpecification attr43 = findAttribute(cont4spec, "leaf43");
		assertTrue(attr43.isMandatory());
		assertTrue(attr43.isImmutable());

		final HierarchicalPrimaryTypeSpecification cont5spec = modelService.getTypedAccess().getEModelSpecification(cont5modelInfo, HierarchicalPrimaryTypeSpecification.class, getModelServiceTarget(context, null));

		final PrimaryTypeAttributeSpecification attr51 = findAttribute(cont5spec, "leaf51");
		assertFalse(attr51.isMandatory());
		assertTrue(attr51.isImmutable());

		final PrimaryTypeAttributeSpecification attr52 = findAttribute(cont5spec, "leaf52");
		assertFalse(attr52.isMandatory());
		assertFalse(attr52.isImmutable());

		final PrimaryTypeAttributeSpecification attr53 = findAttribute(cont5spec, "leaf53");
		assertTrue(attr53.isMandatory());
		assertTrue(attr53.isImmutable());
		assertFalse(attr53.isSensitive());

		final HierarchicalPrimaryTypeSpecification cont6spec = modelService.getTypedAccess().getEModelSpecification(cont6modelInfo, HierarchicalPrimaryTypeSpecification.class, getModelServiceTarget(context, null));

		final PrimaryTypeAttributeSpecification attr61 = findAttribute(cont6spec, "leaf61");
		assertFalse(attr61.isSensitive());

		final PrimaryTypeAttributeSpecification attr62 = findAttribute(cont6spec, "leaf62");
		assertTrue(attr62.isSensitive());

		final PrimaryTypeAttributeSpecification attr63 = findAttribute(cont6spec, "leaf63");
		assertTrue(attr63.isSensitive());

		final PrimaryTypeAttributeSpecification attr64 = findAttribute(cont6spec, "leaf64");
		assertTrue(attr64.isSensitive());

		final PrimaryTypeAttributeSpecification attr65 = findAttribute(cont6spec, "leaf65");
		assertTrue(attr65.isSensitive());

		final PrimaryTypeAttributeSpecification attr66 = findAttribute(cont6spec, "leaf66");
		assertTrue(attr66.isSensitive());

		final PrimaryTypeAttributeSpecification attr67 = findAttribute(cont6spec, "leaflist67");
		assertTrue(attr67.isSensitive());
	}

	private static final String MODULE_NS_TXT = "urn~test~texts-handling";
	private static final String MODULE_XYZ_VERSION_TXT = "2021.3.7";

	@Test
	public void test___texts_handling() {

		additionallyIgnoreFindingDuringValidation(ValidatorFindingTypeEnm.N671_UNSUPPORTED_EXTENSION.toString());

		final TransformerContext context = createContextWith3ppModules(Arrays.asList(new File(TEST_SUB_DIR + "texts-handling")));
		YangTransformer2.transform(context);

		// -----------------------------------------------------

		final ModelInfo cont1modelInfo = PrimaryTypeGenerator.getModelInfoForPrimaryTypeDefinition(MODULE_NS_TXT, "cont1", MODULE_XYZ_VERSION_TXT);
		final PrimaryTypeDefinition cont1 = load(cont1modelInfo);

		final PrimaryTypeAttribute leaf11 = findAttribute(cont1, "leaf11");
		assertEquals("base desc leaf11", leaf11.getDesc());

		final PrimaryTypeAttribute leaf12 = findAttribute(cont1, "leaf12");
		assertEquals("base desc leaf12", leaf12.getDesc());				// will be deviated in extension

		final PrimaryTypeAttribute leaf13 = findAttribute(cont1, "leaf13");
		assertEquals("leaf13", leaf13.getDesc());							// if no value is specified the name of the data node is used - will also be deviated in extension

		final PrimaryTypeAttribute leaf14 = findAttribute(cont1, "leaf14");
		assertEquals("base disturbances leaf14", leaf14.getDisturbances());

		final PrimaryTypeAttribute leaf15 = findAttribute(cont1, "leaf15");
		assertNull(leaf15.getDisturbances());							// will be deviated in extension

		final PrimaryTypeAttribute leaf16 = findAttribute(cont1, "leaf16");
		assertEquals("base side-effects leaf16", leaf16.getSideEffects());

		final PrimaryTypeAttribute leaf17 = findAttribute(cont1, "leaf17");
		assertNull(leaf17.getSideEffects());							// will be deviated in extension

		final PrimaryTypeAttribute leaf18 = findAttribute(cont1, "leaf18");
		assertEquals("base precondition leaf18", leaf18.getPreCondition());

		final PrimaryTypeAttribute leaf19 = findAttribute(cont1, "leaf19");
		assertNull(leaf19.getPreCondition());							// will be deviated in extension

		final PrimaryTypeAttribute leaf20 = findAttribute(cont1, "leaf20");
		assertEquals("base dependencies leaf20", leaf20.getDependencies());

		final PrimaryTypeAttribute leaf21 = findAttribute(cont1, "leaf21");
		assertNull(leaf21.getDependencies());							// will be deviated in extension

		final PrimaryTypeAttribute leaf22 = findAttribute(cont1, "leaf22");
		assertEquals("base takes-effect leaf22", leaf22.getTakesEffect());

		final PrimaryTypeAttribute leaf23 = findAttribute(cont1, "leaf23");
		assertNull(leaf23.getTakesEffect());							// will be deviated in extension

		// -----------------------------------------------------

		final ModelInfo cont1ExtensionModelInfo = PrimaryTypeExtensionGenerator.getModelInfoForPrimaryTypeExtensionDefinition(DEFAULT_TEST_TARGET, MODULE_NS_TXT, "cont1");
		final PrimaryTypeExtensionDefinition cont1ext = load(cont1ExtensionModelInfo);

		assertTrue(cont1ext.getPrimaryTypeAttributeReplacement().getPrimaryTypeAttribute().size() == 7);

		final PrimaryTypeAttribute leaf12ext = findReplacedAttribute(cont1ext, "leaf12");
		assertEquals("deviated desc leaf12", leaf12ext.getDesc());

		final PrimaryTypeAttribute leaf13ext = findReplacedAttribute(cont1ext, "leaf13");
		assertEquals("deviated desc leaf13", leaf13ext.getDesc());

		final PrimaryTypeAttribute leaf15ext = findReplacedAttribute(cont1ext, "leaf15");
		assertEquals("deviated disturbances leaf15", leaf15ext.getDisturbances());

		final PrimaryTypeAttribute leaf17ext = findReplacedAttribute(cont1ext, "leaf17");
		assertEquals("deviated side-effects leaf17", leaf17ext.getSideEffects());

		final PrimaryTypeAttribute leaf19ext = findReplacedAttribute(cont1ext, "leaf19");
		assertEquals("deviated precondition leaf19", leaf19ext.getPreCondition());

		final PrimaryTypeAttribute leaf21ext = findReplacedAttribute(cont1ext, "leaf21");
		assertEquals("deviated dependencies leaf21", leaf21ext.getDependencies());

		final PrimaryTypeAttribute leaf23ext = findReplacedAttribute(cont1ext, "leaf23");
		assertEquals("deviated takes-effect leaf23", leaf23ext.getTakesEffect());

		// -----------------------------------------------------

		final ModelInfo cont2modelInfo = PrimaryTypeGenerator.getModelInfoForPrimaryTypeDefinition(MODULE_NS_TXT, "cont2", MODULE_XYZ_VERSION_TXT);
		final PrimaryTypeDefinition cont2 = load(cont2modelInfo);

		assertEquals("base desc cont2", cont2.getDesc());

		final ModelInfo cont2ExtensionModelInfo = PrimaryTypeExtensionGenerator.getModelInfoForPrimaryTypeExtensionDefinition(DEFAULT_TEST_TARGET, MODULE_NS_TXT, "cont2");
		final PrimaryTypeExtensionDefinition cont2ext = load(cont2ExtensionModelInfo);

		assertEquals("deviated desc cont2", cont2ext.getPrimaryTypeExtension().getDesc());

		// -----------------------------------------------------

		final ModelInfo cont3modelInfo = PrimaryTypeGenerator.getModelInfoForPrimaryTypeDefinition(MODULE_NS_TXT, "cont3", MODULE_XYZ_VERSION_TXT);
		final PrimaryTypeDefinition cont3 = load(cont3modelInfo);

		assertEquals("dependencies cont3", cont3.getDependencies());

		final ModelInfo cont3ExtensionModelInfo = PrimaryTypeExtensionGenerator.getModelInfoForPrimaryTypeExtensionDefinition(DEFAULT_TEST_TARGET, MODULE_NS_TXT, "cont3");
		final PrimaryTypeExtensionDefinition cont3ext = load(cont3ExtensionModelInfo);

		assertEquals("deviated dependencies cont3", cont3ext.getPrimaryTypeExtension().getDependencies());

		// -----------------------------------------------------

		final ModelInfo cont4modelInfo = PrimaryTypeGenerator.getModelInfoForPrimaryTypeDefinition(MODULE_NS_TXT, "cont4", MODULE_XYZ_VERSION_TXT);
		final PrimaryTypeDefinition cont4 = load(cont4modelInfo);

		assertEquals("precondition cont4", cont4.getPreCondition());

		final ModelInfo cont4ExtensionModelInfo = PrimaryTypeExtensionGenerator.getModelInfoForPrimaryTypeExtensionDefinition(DEFAULT_TEST_TARGET, MODULE_NS_TXT, "cont4");
		final PrimaryTypeExtensionDefinition cont4ext = load(cont4ExtensionModelInfo);

		assertEquals("deviated precondition cont4", cont4ext.getPrimaryTypeExtension().getPreCondition());

		// =====================================================================================================================
		// =====================================================================================================================
		// =====================================================================================================================

		processAndDeployIntoModelService();

		final HierarchicalPrimaryTypeSpecification cont1spec = modelService.getTypedAccess().getEModelSpecification(cont1modelInfo, HierarchicalPrimaryTypeSpecification.class, getModelServiceTarget(context, null));

		final PrimaryTypeAttributeSpecification attr11 = findAttribute(cont1spec, "leaf11");
		assertEquals("base desc leaf11", attr11.getDescription());

		final PrimaryTypeAttributeSpecification attr12 = findAttribute(cont1spec, "leaf12");
		assertEquals("deviated desc leaf12", attr12.getDescription());

		final PrimaryTypeAttributeSpecification attr13 = findAttribute(cont1spec, "leaf13");
		assertEquals("deviated desc leaf13", attr13.getDescription());

		final PrimaryTypeAttributeSpecification attr14 = findAttribute(cont1spec, "leaf14");
		assertEquals("base disturbances leaf14", attr14.getDisturbances());

		final PrimaryTypeAttributeSpecification attr15 = findAttribute(cont1spec, "leaf15");
		assertEquals("deviated disturbances leaf15", attr15.getDisturbances());

		final HierarchicalPrimaryTypeSpecification cont2spec = modelService.getTypedAccess().getEModelSpecification(cont2modelInfo, HierarchicalPrimaryTypeSpecification.class, getModelServiceTarget(context, null));
		assertEquals("deviated desc cont2", cont2spec.getDescription());

		final HierarchicalPrimaryTypeSpecification cont3spec = modelService.getTypedAccess().getEModelSpecification(cont3modelInfo, HierarchicalPrimaryTypeSpecification.class, getModelServiceTarget(context, null));
		assertEquals("deviated dependencies cont3", cont3spec.getDependencies());

		final HierarchicalPrimaryTypeSpecification cont4spec = modelService.getTypedAccess().getEModelSpecification(cont4modelInfo, HierarchicalPrimaryTypeSpecification.class, getModelServiceTarget(context, null));
		assertEquals("deviated precondition cont4", cont4spec.getPrecondition());
	}

	private static final String MODULE_NS_SC = "urn!test!system-created";
	private static final String MODULE_XYZ_VERSION_SC = "2021.12.2";

	@Test
	public void test___system_created() {

		additionallyIgnoreFindingDuringValidation(ValidatorFindingTypeEnm.N671_UNSUPPORTED_EXTENSION.toString());

		final TransformerContext context = createContextWith3ppModules(Arrays.asList(new File(TEST_SUB_DIR + "system-created"), new File(ERI_YANG_TYPES), new File(IETF_INET_TYPES), new File(IETF_YANG_TYPES)));
		YangTransformer2.transform(context);

		// -----------------------------------------------------

		final ModelInfo cont1modelInfo = PrimaryTypeGenerator.getModelInfoForPrimaryTypeDefinition(MODULE_NS_SC, "cont1", MODULE_XYZ_VERSION_SC);
		final PrimaryTypeDefinition cont1 = load(cont1modelInfo);
		assertNull(cont1.getSystemCreated());

		final ModelInfo cont1ExtensionModelInfo = PrimaryTypeExtensionGenerator.getModelInfoForPrimaryTypeExtensionDefinition(DEFAULT_TEST_TARGET, MODULE_NS_SC, "cont1");
		final PrimaryTypeExtensionDefinition cont1ext = load(cont1ExtensionModelInfo);
		assertNull(cont1ext.getPrimaryTypeExtension().isSystemCreated());

		// -----------------------------------------------------

		final ModelInfo cont2modelInfo = PrimaryTypeGenerator.getModelInfoForPrimaryTypeDefinition(MODULE_NS_SC, "cont2", MODULE_XYZ_VERSION_SC);
		final PrimaryTypeDefinition cont2 = load(cont2modelInfo);
		assertNull(cont2.getSystemCreated());

		final ModelInfo cont2ExtensionModelInfo = PrimaryTypeExtensionGenerator.getModelInfoForPrimaryTypeExtensionDefinition(DEFAULT_TEST_TARGET, MODULE_NS_SC, "cont2");
		final PrimaryTypeExtensionDefinition cont2ext = load(cont2ExtensionModelInfo);
		assertTrue(cont2ext.getPrimaryTypeExtension().isSystemCreated());

		// -----------------------------------------------------

		final ModelInfo cont3modelInfo = PrimaryTypeGenerator.getModelInfoForPrimaryTypeDefinition(MODULE_NS_SC, "cont3", MODULE_XYZ_VERSION_SC);
		final PrimaryTypeDefinition cont3 = load(cont3modelInfo);
		assertNotNull(cont3.getSystemCreated());

		final ModelInfo cont3ExtensionModelInfo = PrimaryTypeExtensionGenerator.getModelInfoForPrimaryTypeExtensionDefinition(DEFAULT_TEST_TARGET, MODULE_NS_SC, "cont3");
		final PrimaryTypeExtensionDefinition cont3ext = load(cont3ExtensionModelInfo);
		assertNull(cont3ext.getPrimaryTypeExtension().isSystemCreated());

		// -----------------------------------------------------

		final ModelInfo cont4modelInfo = PrimaryTypeGenerator.getModelInfoForPrimaryTypeDefinition(MODULE_NS_SC, "cont4", MODULE_XYZ_VERSION_SC);
		final PrimaryTypeDefinition cont4 = load(cont4modelInfo);
		assertNotNull(cont4.getSystemCreated());

		final ModelInfo cont4ExtensionModelInfo = PrimaryTypeExtensionGenerator.getModelInfoForPrimaryTypeExtensionDefinition(DEFAULT_TEST_TARGET, MODULE_NS_SC, "cont4");
		final PrimaryTypeExtensionDefinition cont4ext = load(cont4ExtensionModelInfo);
		assertFalse(cont4ext.getPrimaryTypeExtension().isSystemCreated());

		// -----------------------------------------------------

		final ModelInfo cont5modelInfo = PrimaryTypeGenerator.getModelInfoForPrimaryTypeDefinition(MODULE_NS_SC, "cont5", MODULE_XYZ_VERSION_SC);
		final PrimaryTypeDefinition cont5 = load(cont5modelInfo);

		final PrimaryTypeAttribute leaf51 = findAttribute(cont5, "leaf51");
		assertHasMeta(Constants.META_INSTANCE_SYSTEM_CREATED_INDICATOR, leaf51);
		final PrimaryTypeAttribute leaf52 = findAttribute(cont5, "leaf52");
		assertHasMeta(Constants.META_INSTANCE_SYSTEM_CREATED_INDICATOR, leaf52);

		// -----------------------------------------------------

		final ModelInfo list6modelInfo = PrimaryTypeGenerator.getModelInfoForPrimaryTypeDefinition(MODULE_NS_SC, "list6", MODULE_XYZ_VERSION_SC);
		final PrimaryTypeDefinition list6 = load(list6modelInfo);
		assertNotNull(list6.getSystemCreated());

		// =====================================================================================================================
		// =====================================================================================================================
		// =====================================================================================================================

		processAndDeployIntoModelService();

		final HierarchicalPrimaryTypeSpecification cont1spec = modelService.getTypedAccess().getEModelSpecification(cont1modelInfo, HierarchicalPrimaryTypeSpecification.class, getModelServiceTarget(context, null));
		assertFalse(cont1spec.isSystemCreated());

		final HierarchicalPrimaryTypeSpecification cont2spec = modelService.getTypedAccess().getEModelSpecification(cont2modelInfo, HierarchicalPrimaryTypeSpecification.class, getModelServiceTarget(context, null));
		assertTrue(cont2spec.isSystemCreated());

		final HierarchicalPrimaryTypeSpecification cont3spec = modelService.getTypedAccess().getEModelSpecification(cont3modelInfo, HierarchicalPrimaryTypeSpecification.class, getModelServiceTarget(context, null));
		assertTrue(cont3spec.isSystemCreated());

		final HierarchicalPrimaryTypeSpecification cont4spec = modelService.getTypedAccess().getEModelSpecification(cont4modelInfo, HierarchicalPrimaryTypeSpecification.class, getModelServiceTarget(context, null));
		assertFalse(cont4spec.isSystemCreated());
	}

	private static final String MODULE_NS_WB = "urn;test;write-behaviour";
	private static final String MODULE_XYZ_VERSION_WB = "2021.3.7";

	@Test
	public void test___write_behaviour() {

		additionallyIgnoreFindingDuringValidation(ValidatorFindingTypeEnm.N671_UNSUPPORTED_EXTENSION.toString());

		final TransformerContext context = createContextWith3ppModules(Arrays.asList(new File(TEST_SUB_DIR + "write-behaviour")));
		YangTransformer2.transform(context);

		// -----------------------------------------------------

		final ModelInfo cont1modelInfo = PrimaryTypeGenerator.getModelInfoForPrimaryTypeDefinition(MODULE_NS_WB, "cont1", MODULE_XYZ_VERSION_WB);
		final PrimaryTypeDefinition cont1 = load(cont1modelInfo);
		assertEquals(WriteBehaviorType.PERSIST_AND_DELEGATE, cont1.getWriteBehavior());

		final ModelInfo cont1ExtensionModelInfo = PrimaryTypeExtensionGenerator.getModelInfoForPrimaryTypeExtensionDefinition(DEFAULT_TEST_TARGET, MODULE_NS_WB, "cont1");
		final PrimaryTypeExtensionDefinition cont1ext = load(cont1ExtensionModelInfo);
		assertNull(cont1ext.getPrimaryTypeExtension().getWriteBehavior());

		// -----------------------------------------------------

		final ModelInfo cont2modelInfo = PrimaryTypeGenerator.getModelInfoForPrimaryTypeDefinition(MODULE_NS_WB, "cont2", MODULE_XYZ_VERSION_WB);
		final PrimaryTypeDefinition cont2 = load(cont2modelInfo);
		assertEquals(WriteBehaviorType.PERSIST_AND_DELEGATE, cont2.getWriteBehavior());

		final ModelInfo cont2ExtensionModelInfo = PrimaryTypeExtensionGenerator.getModelInfoForPrimaryTypeExtensionDefinition(DEFAULT_TEST_TARGET, MODULE_NS_WB, "cont2");
		final PrimaryTypeExtensionDefinition cont2ext = load(cont2ExtensionModelInfo);
		assertEquals(WriteBehaviorType.NOT_ALLOWED, cont2ext.getPrimaryTypeExtension().getWriteBehavior());

		// -----------------------------------------------------

		final ModelInfo cont3modelInfo = PrimaryTypeGenerator.getModelInfoForPrimaryTypeDefinition(MODULE_NS_WB, "cont3", MODULE_XYZ_VERSION_WB);
		final PrimaryTypeDefinition cont3 = load(cont3modelInfo);
		assertEquals(WriteBehaviorType.NOT_ALLOWED, cont3.getWriteBehavior());

		final ModelInfo cont3ExtensionModelInfo = PrimaryTypeExtensionGenerator.getModelInfoForPrimaryTypeExtensionDefinition(DEFAULT_TEST_TARGET, MODULE_NS_WB, "cont3");
		final PrimaryTypeExtensionDefinition cont3ext = load(cont3ExtensionModelInfo);
		assertNull(cont3ext.getPrimaryTypeExtension().getWriteBehavior());

		// -----------------------------------------------------

		final ModelInfo cont4modelInfo = PrimaryTypeGenerator.getModelInfoForPrimaryTypeDefinition(MODULE_NS_WB, "cont4", MODULE_XYZ_VERSION_WB);
		final PrimaryTypeDefinition cont4 = load(cont4modelInfo);
		assertEquals(WriteBehaviorType.NOT_ALLOWED, cont4.getWriteBehavior());

		final ModelInfo cont4ExtensionModelInfo = PrimaryTypeExtensionGenerator.getModelInfoForPrimaryTypeExtensionDefinition(DEFAULT_TEST_TARGET, MODULE_NS_WB, "cont4");
		final PrimaryTypeExtensionDefinition cont4ext = load(cont4ExtensionModelInfo);
		assertEquals(WriteBehaviorType.PERSIST_AND_DELEGATE, cont4ext.getPrimaryTypeExtension().getWriteBehavior());

		// =====================================================================================================================
		// =====================================================================================================================
		// =====================================================================================================================

		processAndDeployIntoModelService();

		final HierarchicalPrimaryTypeSpecification cont1spec = modelService.getTypedAccess().getEModelSpecification(cont1modelInfo, HierarchicalPrimaryTypeSpecification.class, getModelServiceTarget(context, null));
		assertEquals(WriteBehavior.PERSIST_AND_DELEGATE, cont1spec.getWriteBehavior());

		final HierarchicalPrimaryTypeSpecification cont2spec = modelService.getTypedAccess().getEModelSpecification(cont2modelInfo, HierarchicalPrimaryTypeSpecification.class, getModelServiceTarget(context, null));
		assertEquals(WriteBehavior.NOT_ALLOWED, cont2spec.getWriteBehavior());

		final HierarchicalPrimaryTypeSpecification cont3spec = modelService.getTypedAccess().getEModelSpecification(cont3modelInfo, HierarchicalPrimaryTypeSpecification.class, getModelServiceTarget(context, null));
		assertEquals(WriteBehavior.NOT_ALLOWED, cont3spec.getWriteBehavior());

		final HierarchicalPrimaryTypeSpecification cont4spec = modelService.getTypedAccess().getEModelSpecification(cont4modelInfo, HierarchicalPrimaryTypeSpecification.class, getModelServiceTarget(context, null));
		assertEquals(WriteBehavior.PERSIST_AND_DELEGATE, cont4spec.getWriteBehavior());
	}
}
